(function () {

  if ( typeof window.CustomEvent === "function" ) return false;

  function CustomEvent ( event, params ) {
    params = params || { bubbles: false, cancelable: false, detail: undefined };
    var evt = document.createEvent( 'CustomEvent' );
    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
    return evt;
   }

  CustomEvent.prototype = window.Event.prototype;

  window.CustomEvent = CustomEvent;
})();

  (function () {
    if (!Element.prototype.scrollIntoViewIfNeeded) {
      Element.prototype.scrollIntoViewIfNeeded = function (centerIfNeeded) {
        centerIfNeeded = arguments.length === 0 ? true : !!centerIfNeeded;

        var parent = this.parentNode,
        parentComputedStyle = window.getComputedStyle(parent, null),
        parentBorderTopWidth = parseInt(parentComputedStyle.getPropertyValue('border-top-width')),
        parentBorderLeftWidth = parseInt(parentComputedStyle.getPropertyValue('border-left-width')),
        overTop = this.offsetTop - parent.offsetTop < parent.scrollTop,
        overBottom = (this.offsetTop - parent.offsetTop + this.clientHeight - parentBorderTopWidth) > (parent.scrollTop + parent.clientHeight),
        overLeft = this.offsetLeft - parent.offsetLeft < parent.scrollLeft,
        overRight = (this.offsetLeft - parent.offsetLeft + this.clientWidth - parentBorderLeftWidth) > (parent.scrollLeft + parent.clientWidth),
        alignWithTop = overTop && !overBottom;

        if ((overTop || overBottom) && centerIfNeeded) {
          parent.scrollTop = this.offsetTop - parent.offsetTop - parent.clientHeight / 2 - parentBorderTopWidth + this.clientHeight / 2;
        }

        if ((overLeft || overRight) && centerIfNeeded) {
          parent.scrollLeft = this.offsetLeft - parent.offsetLeft - parent.clientWidth / 2 - parentBorderLeftWidth + this.clientWidth / 2;
        }

        if ((overTop || overBottom || overLeft || overRight) && !centerIfNeeded) {
          this.scrollIntoView(alignWithTop);
        }
      };
    }
  })();

window.App || (window.App = {});
window.App.config = {
  promises: {
    dustBluebird: Promise.promisifyAll(dust),
    cloudinaryBird: Promise.promisifyAll($.cloudinary)
  },
  commons: {
    map: {},
    trans: {}
  },
  cache: {
    activeEstate: {},
    activeEstateListing: {}
  },
  modules: {
    map: {},
    info: {},
    edit: {},
    delete: {},
    insert: {},
    filters: {}
  }
};
window.App.utils = {};
// var trans;
// var cloudinaryBird = Promise.promisifyAll($.cloudinary);
// var activeEstate;
// var activeEstateListing;
$.cloudinary.config({ cloud_name: 'firvain', api_key: '375138932689591' });

/*eslint no-param-reassign: ["error", { "props": false }]*/
App.utils = {
  findById: function findById(map, id) {
    var layers = map.getLayers();
    var length = layers.getLength();
    for (var i = 0; i < length; i++) {
      if (id === layers.item(i).get('id')) {
        return layers.item(i);
      }
    }
    return null;
  },
  findByName: function findByName(map, name) {
    var layers = map.getLayers();
    var length = layers.getLength();
    for (var i = 0; i < length; i++) {
      if (name === layers.item(i).get('name')) {
        return layers.item(i);
      }
    }
    return null;
  },
  preventDotAndSpace: function preventDotAndSpace(e) {
    var key = e.charCode ? e.charCode : e.keyCode;
    this.innerHTML = key;
    if (key === 46 || key === 32) {
      return false;
    }
    return true;
  },
  geometryFunction: function geometryFunction(coordinates, geometry) {
    var geom = geometry;
    var start;
    var end;
    if (!geom) {
      geom = new ol.geom.Polygon(null);
    }
    start = coordinates[0];
    end = coordinates[1];
    geom.setCoordinates([
      [start, [start[0], end[1]], end, [end[0], start[1]], start]
    ]);
    return geom;
  },
  hasClass: function hasClass(el, className) {
    if (el.classList) {
      return el.classList.contains(className);
    }
    return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
  },
  removeClass: function removeClass(el, className) {
    var element = el;
    if (element.classList) {
      element.classList.remove(className);
    } else {
      element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  },
  addClass: function removeClass(el, className) {
    var element = el;
    if (element.classList) {
      element.classList.add(className);
    } else {
      element.className += ' ' + className;
    }
  },
  toggleClass: function toggleClass(el, className) {
    var classes;
    var existingIndex;
    var element = el;
    if (element.classList) {
      element.classList.toggle(className);
    } else {
      classes = element.className.split(' ');
      existingIndex = classes.indexOf(className);

      if (existingIndex >= 0) {
        classes.splice(existingIndex, 1);
      } else {
        classes.push(className);
      }
      element.className = classes.join(' ');
    }
  },
  requestFullScreen: function requestFullScreen(element) {
    // Supports most browsers and their versions.
    var requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;
    var wscript;
    if (requestMethod) { // Native full screen.
      requestMethod.call(element);
    } else if (typeof window.ActiveXObject !== 'undefined') { // Older IE.
      wscript = new ActiveXObject('WScript.Shell');
      if (wscript !== null) {
        wscript.SendKeys('{F11}');
      }
    }
  },
  exitFullsreen: function exitFullsreen(element) {
    var requestMethod = element.exitFullScreen || element.webkitExitFullscreen || element.mozCancelFullScreen || element.msExitFullscreen;
    var wscript;
    if (requestMethod) { // Native full screen.
      requestMethod.call(element);
    } else if (typeof window.ActiveXObject !== 'undefined') { // Older IE.
      wscript = new ActiveXObject('WScript.Shell');
      if (wscript !== null) {
        wscript.SendKeys('{Esc}');
      }
    }
  },
  elToEn: function elToEn(string) {
    var originalString = string;
    var newString;
    var replace = new Array('α', 'ά', 'Ά', 'Α', 'β', 'Β', 'γ', 'Γ', 'δ', 'Δ', 'ε', 'έ', 'Ε', 'Έ', 'ζ', 'Ζ', 'η', 'ή', 'Η', 'θ', 'Θ', 'ι', 'ί', 'ϊ', 'ΐ', 'Ι', 'Ί', 'κ', 'Κ', 'λ', 'Λ', 'μ', 'Μ', 'ν', 'Ν', 'ξ', 'Ξ', 'ο', 'ό', 'Ο', 'Ό', 'π', 'Π', 'ρ', 'Ρ', 'σ', 'ς', 'Σ', 'τ', 'Τ', 'υ', 'ύ', 'Υ', 'Ύ', 'φ', 'Φ', 'χ', 'Χ', 'ψ', 'Ψ', 'ω', 'ώ', 'Ω', 'Ώ', ' ', '\'', '\'', ',');
    var replace_n = new Array('a', 'a', 'A', 'A', 'v', 'V', 'g', 'G', 'd', 'D', 'e', 'e', 'E', 'E', 'z', 'Z', 'i', 'i', 'I', 'th', 'Th', 'i', 'i', 'i', 'i', 'I', 'I', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N', 'x', 'X', 'o', 'o', 'O', 'O', 'p', 'P', 'r', 'R', 's', 's', 'S', 't', 'T', 'u', 'u', 'Y', 'Y', 'f', 'F', 'ch', 'Ch', 'ps', 'Ps', 'o', 'o', 'O', 'O', ' ', '_', '_', '_');

    for (var i = 0; i < replace.length; i++) {
      originalString = originalString.replace(new RegExp(replace[i], 'g'), replace_n[i]);
    }
    newString = originalString;
    return newString;
  },
  handleDate: function handleDate(str, lang) {
    var split;
    var newDate = [];
    if (typeof str === 'string' && lang !== 'el') {
      split = _.split(str, '-', 3);
      newDate = [split[1], split[0], split[2]];
      return _.join(newDate, '-');
    }
    return str;
  },
  sanitize: function sanitize(el) {
    var sanitizedStr;
    var str = el.value;
    sanitizedStr = str.replace(/[^a-z0-9A-ZA-zΑ-Ωα-ωίϊΐόάέύϋΰήώ]/gi, '');
    el.value = sanitizedStr;
    console.log(el);
    console.log(el.value);
    console.log(sanitizedStr);
  }
  // zoomToGid: function zoomToGid(map, gid) {
  //   var coordinates = utils.findById(map, 'filteredEstates').getSource().getFeatureById(gid)
  //   .getGeometry()
  //   .getCoordinates();
  //   map.getView().setCenter(coordinates);
  // }
};

App.config.modules.map = (function ol3Map(window, document, Promise, ol, App) {
  'use strict';
  var center = [3677385, 4120949];
  var extent = [3652772, 4112808, 3700000, 4132797];
  var geoJSONFormat = new ol.format.GeoJSON({
    defaultDataProjection: 'EPSG:4326'
  });

  var mapStyles = {
    iconType: function getIconType(estateType) {
      var iconType = {
        Apartment: function getApartmentIcon() {
          return 'apartment';
        },
        Store: function getStoreIcon() {
          return 'store';
        },
        'Detached House': function getDetachedHouseIcon() {
          return 'detached';
        },
        Maisonette: function getMaisonetteIcon() {
          return 'maisonette';
        },
        Villa: function getVillaIon() {
          return 'villa';
        }
      };
      return (iconType[estateType])();
    },
    estates: function estates(feature) {
      var src = './images/pins/none/' +
      mapStyles.iconType(feature.get('estatetype_en')) + '-48.png';
      return new ol.style.Style({
        geometry: feature.getGeometry(),
        image: new ol.style.Icon(({
          src: src,
          anchorOrigin: 'bottom-left',
          anchor: [0.5, 0],
          scale: 1
        }))
      });
    }
  };

  var mapSources = {
    bing: function bing() {
      return new ol.source.BingMaps({
        key: 'Ak2Gq8VUfICsPpuf7LRANXmXt2sHWmSLPhohmVLFtFIEwYjs_5MCyAhAFwRSVpLj',
        imagerySet: 'AerialWithLabels'
      });
    },
    mapBox: function mapBox() {
      return new ol.source.XYZ({
        attributions: [new ol.Attribution({
          html: '<a href="https://www.mapbox.com/about/maps/" target="_blank">&copy; Mapbox &copy; OpenStreetMap</a>'
        })],
        url: 'https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA'
      });
    },
    estates: function estates() {
      return new ol.source.Vector({
        format: geoJSONFormat,
        loader: function propertyLoader() {
          var url = 'http://127.0.0.1:3000/api/property/all/' + id;
          var self = this;
          Promise.resolve(
            $.ajax({
              url: url,
              type: 'GET',
              dataType: 'json'
            })
          )
          .then(function resolve(data) {
            var features = geoJSONFormat.readFeatures(data, {
              featureProjection: 'EPSG:3857'
            });
            self.addFeatures(features);
          })
          .then(function resolve() {
            self.getFeatures().forEach(function addIds(feature) {
              feature.setId(feature.getProperties().gid);
            });
          })
          .catch(function error(e) {
            console.log(e);
            if (e.status === 404) {
              toastr.error('Sorry, we cannot find any properties!');
            } else if (e.status === 503) {
              toastr.error('Service Unavailable!');
            } else {
              toastr.error('Internal Server Error! Please reload page or try again later');
            }
          });
        }
      });
    }
  };

  var mapLayers = {
    bing: function bing(trans) {
      return new ol.layer.Tile({
        visible: true,
        source: mapSources.bing(),
        maxZoom: 19,
        crossOrigin: 'anonymous',
        preload: Infinity,
        id: 'bing',
        name: trans.layers.bing
      });
    },
    mapBox: function mapBox(trans) {
      return new ol.layer.Tile({
        source: mapSources.mapBox(),
        id: 'mapbox',
        name: trans.layers.mapBox
      });
    },
    estates: function estates() {
      return new ol.layer.Vector({
        source: mapSources.estates(),
        id: 'estates',
        visible: true,
        style: mapStyles.estates
      });
    },
    newEstates: function newEstates(trans) {
      return new ol.layer.Vector({
        source: new ol.source.Vector(),
        id: 'newEstates',
        visible: false
      });
    }
  };
  var initialize = function initialize() {
    var trans = App.config.commons.trans;
    var layers = Object.keys(mapLayers).map(function addMapLayers(key) {
      if (key !== 'bing') { return mapLayers[key](trans); }
      return null;
    });
    return new ol.Map({
      target: 'appwrapper__map',
      layers: _.compact(layers),
      loadTilesWhileAnimating: true,
      loadTilesWhileInteracting: true,
      renderer: 'canvas',
      controls: ol.control.defaults({
        attributionOptions: {
          collapsible: false,
          collapsed: false
        }
      })
       .extend([
         new ol.control.ScaleLine({
           units: 'metric'
         }), new ol.control.OverviewMap({
           className: 'ol-overviewmap ol-custom-overviewmap',
           collapsible: true,
           collapsed: true,
           layers: [mapLayers.bing(trans)]
         }),
         new ol.control.ZoomToExtent({
           extent: extent
         })
       ]),
      view: new ol.View({
        center: center,
        extent: extent,
        projection: 'EPSG:3857',
        zoom: 14,
        maxZoom: 19,
        minZoom: 14
      })
    });
  };
  return {
    initialize: initialize
  };
}(window, document, Promise, ol, App));

App.config.modules.info = (function info(window, document, Promise, $, App) {
  'use strict';
  var lang = document.documentElement.lang;
  var editButton = document.querySelector('#edit');
  var deleteButton = document.querySelector('#delete');
  var infoBoxContent = document.querySelector('#appwrapper__infobox-content');
  var dustBluebird = App.config.promises.dustBluebird;
  var utils = App.utils;
  function dustEstateInfo(data) {
    dustBluebird.renderAsync('edit', data)
    .then(function resolveDust(result) {
      utils.removeClass(infoBoxContent, 'visuallyhidden');
      infoBoxContent.innerHTML = result;
      getmdlSelect.init('.getmdl-select');
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  function selectFeature(evt) {
    var map = evt.map;
    var coordinates;
    var estate;
    var gid;
    var renderData = _.cloneDeep(App.config.commons.trans);
    var style = new ol.style.Style({
      image: new ol.style.Icon(({
        src: './images/pins/generic-48.png',
        anchorOrigin: 'bottom-left',
        anchor: [0.5, 0],
        scale: 1,
        color: 'rgb(255,82,82)'
      }))
    });
    // var coordinate = evt.coordinate;
    var clickedFeature = map.forEachFeatureAtPixel(evt.pixel, function findFeature(feature, layer) {
      return {
        feature: feature,
        layer: layer
      };
    }, this, function clickedFeatureLayerFilter(layer) {
      if (layer.get('id') === 'estates') {
        return true;
      }
      return false;
    }, this);
    if (clickedFeature) {
      utils.findById(map, 'estates').getSource().getFeatures()
      .forEach(function resetStyle(feature) {
        feature.setStyle(null);
      });
      estate = clickedFeature.feature;
      coordinates = estate.getGeometry().getCoordinates();
      map.getView().setCenter(coordinates);
      map.getView().setZoom(16);
      gid = estate.getProperties().gid;
      estate.setStyle(style);
      var p1 = Promise.resolve(
        $.ajax({
          url: 'http://127.0.0.1:3000/api/property',
          type: 'GET',
          data: {
            gid: gid
          }
        })
        );
      p1.then(function resolve(data) {
        var feature = data.features[0];
        App.config.cache.activeEstate = feature.properties;
        return feature;
      })
      .then(function resolve(feature) {
        if (lang === 'el') {
          renderData.values = {
            gid: feature.properties.gid,
            x: coordinates[0],
            y: coordinates[1],
            areaName: feature.properties.area_name,
            estateType: feature.properties.estatetype,
            address: feature.properties.street_el,
            addressNumber: feature.properties.street_number,
            pscode: feature.properties.ps_code,
            estateArea: feature.properties.estatearea,
            bedrooms: feature.properties.bedrooms,
            floor: feature.properties.floor,
            year: feature.properties.year,
            planNumber: feature.properties.plan_num,
            plotArea: feature.properties.plotarea,
            parcelNumber: feature.properties.parcel_num,
            parking: feature.properties.parking,
            furnished: feature.properties.furnished,
            isnew: feature.properties.isnew,
            heating: feature.properties.heating,
            cooling: feature.properties.cooling,
            view: feature.properties.view,
            title: feature.properties.title
          };
        } else {
          renderData.values = {
            gid: feature.properties.gid,
            x: feature.geometry.coordinates[0],
            y: feature.geometry.coordinates[1],
            areaName: feature.properties.area_name,
            estateType: feature.properties.estatetype_en,
            address: feature.properties.street_en,
            addressNumber: feature.properties.street_number,
            pscode: feature.properties.ps_code,
            estateArea: feature.properties.estatearea,
            bedrooms: feature.properties.bedrooms,
            floor: feature.properties.floor,
            year: feature.properties.year,
            planNumber: feature.properties.plan_num,
            plotArea: feature.properties.plotarea,
            parcelNumber: feature.properties.parcel_num,
            parking: feature.properties.parking,
            furnished: feature.properties.furnished,
            isnew: feature.properties.isnew,
            heating: feature.properties.heating,
            cooling: feature.properties.cooling,
            view: feature.properties.view,
            title: feature.properties.title
          };
        }
      });
      p1.catch(function error(e) {
        console.log(e);
      });
      var p2 = Promise.resolve(
        $.ajax({
          url: 'http://127.0.0.1:3000/api/listing',
          type: 'GET',
          data: {
            gid: gid
          }
        })
        )
      .then(function resolve(data) {
        App.config.cache.activeEstateListing = data;
        renderData.listing.values = data;
        renderData.listing.values.date_start = utils.handleDate(data.date_start, lang);
        renderData.listing.values.date_end = utils.handleDate(data.date_end, lang);
        renderData.listing.exists = true;
      })
      .catch(function error(e) {
        var snackbarContainer = document.querySelector('#appwrapper__snackbar');
        var data = { message: App.config.commons.trans.errors.listing404 };
        console.log(e);
        if (e.status === 404) {
          renderData.listing.exists = false;
          snackbarContainer.MaterialSnackbar.showSnackbar(data);
        }
      });
      Promise.each([p1, p2], function e(result) {
      })
      .then(function resolve() {
        dustEstateInfo(renderData);
        editButton.removeAttribute('disabled');
        deleteButton.removeAttribute('disabled');

        utils.addClass(editButton, 'mdl-button--accent');
        utils.addClass(deleteButton, 'mdl-button--accent');
      })
      .catch(function error(e) {
        console.log(e);
      });
    } else {
      infoBoxContent.innerHTML = '';
      utils.addClass(infoBoxContent, 'visuallyhidden');
      editButton.setAttribute('disabled', true);

      deleteButton.setAttribute('disabled', true);

      utils.findById(map, 'estates').getSource().getFeatures()
      .forEach(function resetStyle(feature) {
        feature.setStyle(null);
      });
    }
  }

  function init() {
    var map = App.config.commons.map;
    document.querySelector('body').dataset.active = 'info';
    map.on('click', selectFeature);
  }
  function disable() {
    var map = App.config.commons.map;
    map.un('click', selectFeature);
  }
  return {
    init: init,
    disable: disable
  };
}(window, document, Promise, jQuery, App));

App.config.modules.edit = (function edit(window, document, Promise, $, dPick, moment) {
  'use strict';
  var content = document.querySelector('#appwrapper__infobox-content');
  var lang = document.documentElement.lang;
  var info = App.config.modules.info;
  var utils = App.utils;
  var editButton = document.querySelector('#edit');
  var deleteButton = document.querySelector('#delete');
  var body = document.querySelector('body');
  function clearContent() {
    if (content.children.length > 0) {
      content.innerHTML = '';
    }
  }
  function getInteraction(id) {
    var map = App.config.commons.map;
    var interactions = map.getInteractions();
    var found = {};
    interactions.forEach(function getInteractionId(interaction) {
      if (interaction.get('id') === id) {
        found = interaction;
        return false;
      }
      return true;
    });
    return found;
  }
  function assignValidators() {
    var inputs = content.querySelectorAll('input[type=text]');
    [].forEach.call(inputs, function makeParsleyInputs(el) {
      el.addEventListener('blur', function sanitize() {
        var str = this.value;
        var sanitizedStr;
        if (this.dataset.type === 'number') {
          sanitizedStr = str.replace(/[/\D/ ]/gi, '');
        } else if (this.dataset.type === 'alphanum') {
          sanitizedStr = str.replace(/[^a-z0-9A-ZA-zΑ-Ωα-ωίϊΐόάέύϋΰήώ ]/gi, '');
        } else if (this.dataset.type === 'special') {
          sanitizedStr = str.replace(/[^0-9 \/]/gi, '');
        } else if (this.dataset.type === 'date') {
          sanitizedStr = str.replace(/[^0-9 \-]/gi, '');
        }
        this.value = sanitizedStr;
        utils.removeClass(this.parentNode, 'is-invalid');
      });
    });
  }

  function setEstateType(type) {
    var types;
    if (lang === 'el') {
      types = {
        Διαμέρισμα: function getApartment() {
          return 'Apartment';
        },
        Μονοκατοικία: function getDetachedHouse() {
          return 'Detached House';
        },
        Μεζονέτα: function getMaisonette() {
          return 'Maisonette';
        },
        Έπαυλη: function getVilla() {
          return 'Villa';
        }
      };
    } else {
      types = {
        Apartment: function getApartment() {
          return 'Διαμέρισμα';
        },
        'Detached House': function getDetachedHouse() {
          return 'Μονοκατοικία';
        },
        Maisonette: function getMaisonette() {
          return 'Μεζονέτα';
        },
        Villa: function getVilla() {
          return 'Έπαυλη';
        }
      };
    }
    return types[type]();
  }
  function collectValues() {
    var values = {};
    var filteredValues = {};
    var inputs = content.querySelectorAll('input[type=text]');
    var checkboxes = content.querySelectorAll('input[type=checkbox]');
    values.estate = {};
    values.listing = {};

    [].forEach.call(inputs, function collectFromInputs(el) {
      var name = _.last(_.split(el.getAttribute('id'), '-', 3));
      var value = el.value;
      var newX = document.querySelector('#estate').dataset.newx;
      var newY = document.querySelector('#estate').dataset.newy;
      var originalX = document.querySelector('#estate').dataset.originalx;
      var originalY = document.querySelector('#estate').dataset.originaly;

      if (el.getAttribute('id').indexOf('estate') > -1) {
        if (typeof newX !== 'undefined') {
          values.estate.x = newX;
          values.estate.y = newY;
        } else {
          values.estate.x = originalX;
          values.estate.y = originalY;
        }
        if (lang === 'el') {
          if (name === 'type') {
            values.estate.estatetypeEn = setEstateType(value);
            values.estate.estatetype = value;
          }
          if (name === 'address') {
            values.estate.streetEn = utils.elToEn(value);
            values.estate.streetEl = value;
          }
        } else {
          if (name === 'type') {
            values.estate.estatetypeEn = value;
            values.estate.estatetype = setEstateType(value);
          }
          if (name === 'address') {
            values.estate.streetEn = value;
            values.estate.streetEl = utils.elToEn(value);
          }
        }
        if (name === 'addressNumber') {
          values.estate.streetNumber = value;
        }
        values.estate[name] = value;
      } else {
        if (name === 'type') {
          if (value === 'Sale' || value === 'Πώληση') {
            values.listing.sale = true;
            values.listing.rent = false;
          } else {
            values.listing.sale = false;
            values.listing.rent = true;
          }
        } else {
          values.listing[name] = value;
        }
      }
    });
    [].forEach.call(checkboxes, function collectFromCheckboxes(el) {
      var name = _.last(_.split(el.getAttribute('id'), '-', 3));
      var value = el.checked;
      if (name !== 'pets') {
        values.estate[name] = value;
      } else {
        values.listing[name] = value;
      }
    });
    filteredValues.estate = _.omit(values.estate, ['address', 'addressNumber', 'type', 'toggle']);
    filteredValues.listing = values.listing;
    return filteredValues;
  }
  function update(data) {
    var snackbarContainer = document.querySelector('#appwrapper__snackbar');
    var msgData = {};
    function addGidToListing(input, gid) {
      var returnedData = input;
      returnedData.gid = gid;
      return returnedData;
    }
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/property',
        type: 'PUT',
        data: data.estate
      })
      )
    .then(function resolve(estateResult) {
      msgData.estateId = estateResult.propertyGid;
      if (!_.isEmpty(data.listing)) {
        return $.ajax({
          url: 'http://127.0.0.1:3000/api/listing',
          type: 'PUT',
          data: addGidToListing(data.listing, estateResult.propertyGid)
        });
      }
      return null;
    })
    .then(function resolve(listingResult) {
      var msg;
      // console.log(result)
      if (listingResult === null) {
        msg = { message: 'Updated Estate: ' + msgData.estateId };
      } else {
        msg = { message: 'Updated EstateID: ' + msgData.estateId + ' and ListingID: ' + listingResult.listingId };
      }
      snackbarContainer.MaterialSnackbar.showSnackbar(msg);
    })
    .catch(function error(e) {
      var msg = { message: e };
      console.log(e);
      snackbarContainer.MaterialSnackbar.showSnackbar(msg);
    })
    .finally(function closeUpdate() {
      var map = App.config.commons.map;
      clearContent();
      utils.addClass(content, 'visuallyhidden');
      utils.findById(map, 'estates').getSource().getFeatures()
      .forEach(function resetStyle(feature) {
        feature.setStyle(null);
      });
      editButton.setAttribute('disabled', true);
      deleteButton.setAttribute('disabled', true);
      info.init();
      body.dataset.active = 'info';
      getInteraction('translate').setActive(false);
    });
  }
  function datePicker() {
    var format = (lang === 'el') ? 'DD-MM-YYYY' : 'MM-DD-YYYY';
    var dateStartPicker;
    var dateEndPicker;
    var dateStartBtn = document.getElementById('infobox__date-start');
    var dateEndBtn = document.getElementById('infobox__date-end');
    var dateStartInput = document.getElementById('listing__general-dateStart');
    var dateEndInput = document.getElementById('listing__general-dateEnd');
    var dateStartPickerInit;
    var dateEndPickerInit;
    var observeDatePicker = new MutationObserver(function observeDatePicker(mutations) {
      var attributeValue;
      mutations.forEach(function foerEachMutation(mutation) {
        if (mutation.attributeName === 'class') {
          attributeValue = $(mutation.target).prop(mutation.attributeName);
          if (attributeValue.indexOf('mddtp-picker--inactive') > -1) {
            utils.removeClass(document.getElementById('appwrapper__infobox'), 'unclickable');
          } else {
            utils.addClass(document.getElementById('appwrapper__infobox'), 'unclickable');
          }
        }
      });
    });
    if (dateStartInput !== null) {
      console.log(dateStartInput.value);
      if (dateStartInput.value !== 'undefined') {
        dateStartPickerInit = moment(dateStartInput.value, format);
      } else {
        dateStartPickerInit = moment();
      }
      dateStartPicker = new dPick.default({
        type: 'date',
        init: dateStartPickerInit,
        future: moment().add(5, 'years'),
        trigger: dateStartInput,
        orientation: 'PORTRAIT'
      });
      observeDatePicker.observe(document.getElementById('mddtp-picker__date'), {
        attributes: true
      });
      dateStartInput.addEventListener('onOk', function displayPickedate() {
        utils.addClass(this.parentNode, 'is-dirty');
        this.value = dateStartPicker.time.format(format).toString();
      });
      dateStartBtn.addEventListener('click', function showDatePicker() {
        dateStartPicker.toggle();
      });
    }
    if (dateEndInput !== null) {
      if (dateEndInput.value !== 'undefined') {
        dateEndPickerInit = moment(dateStartInput.value, format);
      } else {
        dateEndPickerInit = moment();
      }
      dateEndInput.addEventListener('onOk', function displayPickedate() {
        utils.addClass(this.parentNode, 'is-dirty');
        this.value = dateEndPicker.time.format(format).toString();
      });
      dateEndPicker = new dPick.default({
        type: 'date',
        init: dateEndPickerInit,
        future: moment().add(5, 'years'),
        trigger: dateEndInput,
        orientation: 'PORTRAIT'
      });
      observeDatePicker.observe(document.getElementById('mddtp-picker__date'), {
        attributes: true
      });
      dateEndBtn.addEventListener('click', function showDatePicker() {
        dateEndPicker.toggle();
      });
    }
  }
  function enableEdit() {
    var observeListingInput = new MutationObserver(function observeListingInput(mutations) {
      var attributeValue;
      mutations.forEach(function foerEachMutation(mutation) {
        if (mutation.attributeName === 'data-val') {
          attributeValue = mutation.target.value;
          if (attributeValue === 'Rent' || attributeValue === 'Ενοικίαση') {
            utils.removeClass(document.querySelector('#listing__general-pets-wrapper'), 'visuallyhidden');
          } else {
            utils.addClass(document.querySelector('#listing__general-pets-wrapper'), 'visuallyhidden');
          }
        }
      });
    });
    var map = App.config.commons.map;
    var inputs = content.querySelectorAll('input');
    var labels = content.querySelectorAll('label');
    var buttons = content.querySelectorAll('button');
    var editCloseButton = document.querySelector('.close');
    var editAgreeButton = document.querySelector('.agree');
    var locationSwitch = document.querySelector('#estate_location-toggle');
    var gid = document.querySelector('#estate__info-gid').value;
    var translate = new ol.interaction.Translate({
      features: new ol.Collection([utils.findById(map, 'estates').getSource().getFeatureById(gid)]),
      layers: [utils.findById(map, 'estates')]
    });

    assignValidators();
    translate.set('id', 'translate');
    if (document.getElementById('listing__idAndType-type') !== null) {
      observeListingInput.observe(document.getElementById('listing__idAndType-type'), {
        attributes: true,
        characterData: true
      });
    }
    translate.on('translateend', function setTranslatedCoordinates(e) {
      var element = document.querySelector('#estate');
      element.dataset.newx = e.coordinate[0];
      element.dataset.newy = e.coordinate[1];
      locationSwitch.checked = false;
      utils.removeClass(locationSwitch.parentNode, 'is-checked');
      // App.config.modules.info.init();
      translate.setActive(false);
    });
    map.addInteraction(translate);
    translate.setActive(false);

    locationSwitch.addEventListener('click', function watchLocationSwitch() {
      if (this.checked) {
        // App.config.modules.info.disable();
        translate.setActive(true);
      } else {
        // App.config.modules.info.init();
        translate.setActive(false);
      }
    });

    [].forEach.call(document.getElementsByClassName('listing'), function removeDisabledListing(el) {
      utils.removeClass(el, 'listing-disabled');
    });

    [].forEach.call(inputs, function removeDisabledInputs(el) {
      if (!utils.hasClass(el, 'not-edditable')) {
        el.removeAttribute('disabled');
      }
    });

    [].forEach.call(labels, function removeDisabledLabels(el) {
      utils.removeClass(el, 'is-disabled');
    });

    [].forEach.call(buttons, function removeDisabledLabels(el) {
      el.removeAttribute('disabled');
    });

    utils.removeClass(document.querySelector('#confirmBtns'), 'visuallyhidden');
    editCloseButton.addEventListener('click', function cancelEdit() {
      clearContent();
      utils.addClass(content, 'visuallyhidden');
      utils.findById(map, 'estates').getSource().getFeatures()
      .forEach(function resetStyle(feature) {
        feature.setStyle(null);
      });
      editButton.setAttribute('disabled', true);
      deleteButton.setAttribute('disabled', true);
      info.init();
      body.dataset.active = 'info';
      getInteraction('translate').setActive(false);
    });
    editAgreeButton.addEventListener('click', function updateEdit() {
      // sanitize();
      var data = collectValues();
      console.log(data);
      update(data);
    });
    datePicker();
  }

  function init() {
    info.disable();
    enableEdit();
  }

  return {
    init: init
  };
}(window, document, Promise, $, mdDateTimePicker, moment, App));

App.config.modules.delete = (function edit(window, document, Promise, $, App, dialogPolyfill) {
  'use strict';
  var utils = App.utils;
  var dustBluebird = App.config.promises.dustBluebird;
  var deleteButton = document.getElementById('delete');
  var editButton = document.getElementById('edit');
  var dialog = document.querySelector('dialog');
  var snackbarContainer = document.querySelector('#appwrapper__snackbar');
  var content = document.getElementById('appwrapper__infobox-content');
  var body = document.querySelector('body');
  var info = App.config.modules.info;
  function clearContent() {
    if (content.children.length > 0) {
      content.innerHTML = '';
    }
  }
  function updateEstates() {
    var map = App.config.commons.map;
    utils.findById(map, 'estates').getSource().clear();
  }
  function deleteListing(data) {
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/listing',
        type: 'DELETE',
        data: { id: data }
      })
      )
    .then(function resolve(deleteListingresult) {
      console.log(deleteListingresult);
      content.querySelector('#listing').innerHTML = '';
      content.querySelector('#listing').parentNode.removeChild(content.querySelector('#listing'));
    })
    .finally(function enableInfo() {
      var map = App.config.commons.map;
      clearContent();
      body.dataset.active = 'info';
      editButton.setAttribute('disabled', true);
      deleteButton.setAttribute('disabled', true);
      info.init();
      utils.findById(map, 'estates').getSource().getFeatures()
      .forEach(function resetStyle(feature) {
        feature.setStyle(null);
      });
    })
    .catch(function error(e) {
      var msg = { message: e };
      console.log(e);
      snackbarContainer.MaterialSnackbar.showSnackbar(msg);
    });
  }
  function deleteEstateAndListing(data) {
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/property',
        type: 'DELETE',
        data: { gid: data }
      })
      )
    .then(function resolve() {
      updateEstates();
    })
    .finally(function enableInfo() {
      var map = App.config.commons.map;
      clearContent();
      body.dataset.active = 'info';
      info.init();
      editButton.setAttribute('disabled', true);
      deleteButton.setAttribute('disabled', true);
      utils.findById(map, 'estates').getSource().getFeatures()
      .forEach(function resetStyle(feature) {
        feature.setStyle(null);
      });
    })
    .catch(function error(e) {
      var msg = { message: e };
      console.log(e);
      snackbarContainer.MaterialSnackbar.showSnackbar(msg);
    });
  }
  function whatToDelete() {
    var checkboxes = dialog.querySelectorAll('input[name=options]');
    var values = {};
    if (checkboxes.length !== 0) {
      [].forEach.call(checkboxes, function getValues(el) {
        var key = _.last(_.split(el.getAttribute('id'), '-', 3));
        values[key] = el.checked;
      });
    }
    return values;
  }
  function cancelDelete() {
    dialog.close();
  }
  function confirmDelete() {
    var data;
    var chooser = whatToDelete();
    if (_.isEmpty(chooser)) {
      data = document.getElementById('estate__info-gid').value;
      deleteEstateAndListing(data);
    } else {
      if (chooser.listing === true) {
        data = document.getElementById('listing__idAndType-id').value;
        deleteListing(data);
      }
      if (chooser.estate === true) {
        data = document.getElementById('estate__info-gid').value;
        deleteEstateAndListing(data);
      }
    }
    dialog.close();
  }
  function show() {
    var listing = document.getElementById('listing__idAndType-id');
    var data = {};
    if (listing === null) {
      data.title = 'Delete Estate';
      data.choose = false;
    } else {
      data.title = 'Please choose what you want to delete';
      data.choose = true;
    }
    dustBluebird.renderAsync('deleteDialog', data)
    .then(function resolveDust(result) {
      dialog.innerHTML = result;
      dialog.showModal();
    })
    .then(function resolve() {
      dialog.querySelector('#cancelDelete').addEventListener('click', cancelDelete);
      dialog.querySelector('#confirmDelete').addEventListener('click', confirmDelete);
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  function initDialog() {
    if (! dialog.showModal) {
      dialogPolyfill.registerDialog(dialog);
    }
    show();
  }
  return {
    init: initDialog
  };
}(window, document, Promise, jQuery, App, dialogPolyfill));

App.config.modules.insert = (function edit(window, document, Promise, $, App, dPick, moment, dialogPolyfill, cloudinary) {
  'use strict';
  var lang = document.documentElement.lang;
  var body = document.querySelector('body');
  var utils = App.utils;
  var dustBluebird = App.config.promises.dustBluebird;
  var content = document.getElementById('appwrapper__infobox-content');
  var addButton = document.getElementById('insert');
  var info = App.config.modules.info;
  var drawnCollection = new ol.Collection();
  function clearContent() {
    if (content.children.length > 0) {
      content.innerHTML = '';
      document.getElementById('activeModule').innerHTML = 'Information';
    }
  }
  function checkEmpty() {
    var inputs = content.querySelectorAll('input[type=text]');
    return _.some(inputs, function isEmpty(input) {
      if (input.value === '') {
        return true;
      }
      return false;
    });
  }
  function getInteraction(id) {
    var map = App.config.commons.map;
    var interactions = map.getInteractions();
    var found = {};
    interactions.forEach(function getInteractionId(interaction) {
      if (interaction.get('id') === id) {
        found = interaction;
        return false;
      }
      return true;
    });
    return found;
  }
  function datePicker() {
    var format = (lang === 'el') ? 'DD-MM-YYYY' : 'MM-DD-YYYY';
    var dateStartPicker;
    var dateEndPicker;
    var dateStartBtn = document.getElementById('infobox__date-start');
    var dateEndBtn = document.getElementById('infobox__date-end');
    var dateStartInput = document.getElementById('listing__general-dateStart');
    var dateEndInput = document.getElementById('listing__general-dateEnd');
    var observeDatePicker = new MutationObserver(function observeDatePicker(mutations) {
      var attributeValue;
      mutations.forEach(function toggleUnclickableInfobox(mutation) {
        if (mutation.attributeName === 'class') {
          attributeValue = $(mutation.target).prop(mutation.attributeName);
          if (attributeValue.indexOf('mddtp-picker--inactive') > -1) {
            utils.removeClass(document.getElementById('appwrapper__infobox'), 'unclickable');
          } else {
            utils.addClass(document.getElementById('appwrapper__infobox'), 'unclickable');
          }
        }
      });
    });
    if (dateStartInput !== null) {
      console.log(dateStartInput.value);
      dateStartPicker = new dPick.default({
        type: 'date',
        init: moment(),
        future: moment().add(5, 'years'),
        trigger: dateStartInput,
        orientation: 'PORTRAIT'
      });
      observeDatePicker.observe(document.getElementById('mddtp-picker__date'), {
        attributes: true
      });
      dateStartInput.addEventListener('onOk', function displayPickedate() {
        utils.addClass(this.parentNode, 'is-dirty');
        this.value = dateStartPicker.time.format(format).toString();
      });
      dateStartBtn.addEventListener('click', function showDatePicker() {
        dateStartPicker.toggle();
      });
    }
    if (dateEndInput !== null) {
      dateEndInput.addEventListener('onOk', function displayPickedate() {
        utils.addClass(this.parentNode, 'is-dirty');
        this.value = dateEndPicker.time.format(format).toString();
      });
      dateEndPicker = new dPick.default({
        type: 'date',
        init: moment(),
        future: moment().add(5, 'years'),
        trigger: dateEndInput,
        orientation: 'PORTRAIT'
      });
      observeDatePicker.observe(document.getElementById('mddtp-picker__date'), {
        attributes: true
      });
      dateEndBtn.addEventListener('click', function showDatePicker() {
        dateEndPicker.toggle();
      });
    }
  }
  function setEstateType(type) {
    var types;
    if (lang === 'el') {
      types = {
        Διαμέρισμα: function getApartment() {
          return 'Apartment';
        },
        Μονοκατοικία: function getDetachedHouse() {
          return 'Detached House';
        },
        Μεζονέτα: function getMaisonette() {
          return 'Maisonette';
        },
        Έπαυλη: function getVilla() {
          return 'Villa';
        }
      };
    } else {
      types = {
        Apartment: function getApartment() {
          return 'Διαμέρισμα';
        },
        'Detached House': function getDetachedHouse() {
          return 'Μονοκατοικία';
        },
        Maisonette: function getMaisonette() {
          return 'Μεζονέτα';
        },
        Villa: function getVilla() {
          return 'Έπαυλη';
        }
      };
    }
    return types[type]();
  }
  function assignValidators() {
    var inputs = content.querySelectorAll('input[type=text]');
    [].forEach.call(inputs, function makeParsleyInputs(el) {
      el.addEventListener('blur', function snitize() {
        var str = this.value;
        var sanitizedStr;
        if (this.dataset.type === 'number') {
          sanitizedStr = str.replace(/[/\D/ ]/gi, '');
        } else if (this.dataset.type === 'alphanum') {
          sanitizedStr = str.replace(/[^a-z0-9A-ZA-zΑ-Ωα-ωίϊΐόάέύϋΰήώ ]/gi, '');
        } else if (this.dataset.type === 'special') {
          sanitizedStr = str.replace(/[^0-9 \/]/gi, '');
        } else if (this.dataset.type === 'date') {
          sanitizedStr = str.replace(/[^0-9 \-]/gi, '');
        }
        this.value = sanitizedStr;
        utils.removeClass(this.parentNode, 'is-invalid');
      });
    });
  }
  function collectValues(getXY) {
    var map = App.config.commons.map;
    var values = {};
    var filteredValues = {};
    var inputs = content.querySelectorAll('input[type=text]');
    var checkboxes = content.querySelectorAll('input[type=checkbox]');
    values.estate = {};
    values.listing = {};
    if (getXY) {
      values.estate.x = utils.findById(map, 'newEstates')
      .getSource().getFeatures()[0].getGeometry().getCoordinates()[0];
      values.estate.y = utils.findById(map, 'newEstates')
      .getSource().getFeatures()[0].getGeometry().getCoordinates()[1];
    } else {
      values.estate.x = document.getElementById('estate').dataset.originalx;
      values.estate.y = document.getElementById('estate').dataset.originaly;
    }
    [].forEach.call(inputs, function collectFromInputs(el) {
      var name = _.last(_.split(el.getAttribute('id'), '-', 3));
      var value = el.value;
      if (lang === 'el') {
        if (name === 'type' && el.id === 'estate__general_estate-type') {
          values.estate.estatetypeEn = setEstateType(value);
          values.estate.estatetype = value;
        } else if (name === 'type' && el.id === 'listing__idAndType-type') {
          if (value === 'Sale' || value === 'Πώληση') {
            values.listing.sale = true;
            values.listing.rent = false;
          } else {
            values.listing.sale = false;
            values.listing.rent = true;
          }
        }
        if (name === 'address') {
          values.estate.streetEn = utils.elToEn(value);
          values.estate.streetEl = value;
        }
      } else {
        if (name === 'type' && el.id === 'estate__general_estate-type') {
          values.estate.estatetypeEn = value;
          values.estate.estatetype = setEstateType(value);
        } else if (name === 'type' && el.id === 'listing__idAndType-type') {
          if (value === 'Sale' || value === 'Πώληση') {
            values.listing.sale = true;
            values.listing.rent = false;
          } else {
            values.listing.sale = false;
            values.listing.rent = true;
          }
        }
        if (name === 'address') {
          values.estate.streetEn = value;
          values.estate.streetEl = utils.elToEn(value);
        }
      }
      if (name === 'addressNumber') {
        values.estate.streetNumber = value;
      }
      if (name === 'price') {
        values.listing.price = value;
      }
      if (name === 'dateStart' || name === 'dateEnd') {
        values.listing[name] = value;
      } else {
        values.estate[name] = value;
      }
    });
    [].forEach.call(checkboxes, function collectFromCheckboxes(el) {
      var name = _.last(_.split(el.getAttribute('id'), '-', 3));
      var value = el.checked;
      if (name !== 'pets') {
        values.estate[name] = value;
      } else {
        values.listing[name] = value;
      }
    });
    filteredValues.estate = _.omit(values.estate, ['address', 'addressNumber', 'type', 'toggle']);
    filteredValues.listing = values.listing;
    return filteredValues;
  }
  function ajaxEstateAndListing(data) {
    console.log(data);
    data.estate.adminId = window.id;
    console.log(data.estate);
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/property',
        type: 'POST',
        data: data.estate
      })
      )
    .then(function resolve(estatedata) {
      var gid = estatedata.gid;
      var uploadOptions = {
        cloud_name: 'firvain',
        upload_preset: 'testupload',
        folder: gid,
        client_allowed_formats: 'jpg',
        theme: 'minimal'
      };
      cloudinary.openUploadWidget(uploadOptions, function upload(error, result) {
        console.log(error, result);
      });
      return gid;
    })
    .then(function resolve(gid) {
      data.listing.gid = gid;
      return $.ajax({
        url: 'http://127.0.0.1:3000/api/listing',
        type: 'POST',
        data: data.listing
      });
    })
    .finally(function closeInsert() {
      clearContent();
      utils.addClass(content, 'visuallyhidden');
      body.dataset.active = 'info';
      info.init();
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  function ajaxListing(data) {
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/listing',
        type: 'POST',
        data: _.merge({ gid: data.gid }, data.listing)
      })
      )
    .then(function resolve(result) {
      console.log(result);
    })
    .finally(function closeInsert() {
      clearContent();
      utils.addClass(content, 'visuallyhidden');
      body.dataset.active = 'info';
      info.init();
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  function renderDustListing() {
    dustBluebird.renderAsync('insertListing', _.cloneDeep(App.config.commons.trans))
    .then(function resolve(data) {
      var agree = document.getElementById('confirmBtns__agree');
      var disagree = document.getElementById('confirmBtns__disagree');
      $('#estate').after(data);
      getmdlSelect.init('.getmdl-select');
      utils.removeClass(document.getElementById('confirmBtns'), 'visuallyhidden');
      assignValidators();
      datePicker();
      disagree.addEventListener('click', function insertAgree(e) {
        e.preventDefault();
        e.stopPropagation();
        clearContent();
        content.innerHTML = '';
        utils.addClass(content, 'visuallyhidden');
        body.dataset.active = info;
        info.init();
      });
      agree.addEventListener('click', function insertContinue(e) {
        var ajaxData;
        e.preventDefault();
        e.stopPropagation();
        if (checkEmpty() !== true) {
          ajaxData = collectValues(false);
          ajaxData.gid = document.getElementById('estate__info-gid').value;
          ajaxListing(ajaxData);
        }
      });
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  function renderDustEsateAndListing() {
    var map = App.config.commons.map;
    var draw = getInteraction('newEstate');
    var renderData = _.cloneDeep(App.config.commons.trans);
    dustBluebird.renderAsync('insert', renderData)
    .then(function resolve(data) {
      clearContent();
      content.innerHTML = data;
      utils.removeClass(content, 'visuallyhidden');
      getmdlSelect.init('.getmdl-select');
    })
    .then(function resolve(data) {
      var agree = document.getElementById('confirmBtns__agree');
      var disagree = document.getElementById('confirmBtns__disagree');
      var listing = document.getElementById('listing');
      assignValidators();
      datePicker();
      disagree.addEventListener('click', function insertAgree(e) {
        e.preventDefault();
        e.stopPropagation();
        clearContent();
        // content.innerHTML = data;
        utils.addClass(content, 'visuallyhidden');
        body.dataset.active = info;
        draw.setActive(false);
        utils.findById(map, 'newEstates').getSource().clear();
        info.init();
      });
      agree.addEventListener('click', function insertContinue(e) {
        e.preventDefault();
        e.stopPropagation();
        utils.removeClass(listing, 'visuallyhidden');
        this.innerHTML = 'Agree';
        e.target.removeEventListener(e.type, insertContinue);
        this.addEventListener('click', function insertAgree(evt) {
          var ajaxData;
          evt.preventDefault();
          evt.stopPropagation();
          // e.target.removeEventListener(e.type, insertAgree);
          if (checkEmpty() !== true) {
            ajaxData = collectValues(true);
            ajaxEstateAndListing(ajaxData);
          }
        });
      });
    })
    .catch(function error(e) {
      console.log(e);
    });
  }

  function createDrawInteraction() {
    var map = App.config.commons.map;
    var draw = new ol.interaction.Draw({
      features: drawnCollection,
      source: utils.findById(map, 'newEstates').getSource(),
      type: 'Point'
    });
    draw.set('id', 'newEstate');
    draw.setActive(false);
    map.addInteraction(draw);
  }
  function checkEstate() {
    if (content.innerHTML === 'undefined' || content.innerHTML === '') {
      return 0; // no estate or listing
    } else if (content.innerHTML !== 'undefined' && document.getElementById('listing') !== null) {
      return 1;  // there is a listing
    }
    return 2; // there is no listing
  }

  function insert() {
    var map = App.config.commons.map;
    var draw = getInteraction('newEstate');
    var newEstates = utils.findById(map, 'newEstates');
    info.disable();
    console.log(checkEstate());
    if (checkEstate() === 0) {
      document.getElementById('activeModule').innerHTML = 'Add Estate And Listing';
      draw.setActive(true);
      utils.findById(map, 'newEstates').setVisible(true);
      drawnCollection.on('change:length', function keepOnlyOneEstate() {
        if (this.getLength() > 0) {
          draw.setActive(false);
          newEstates.getSource().clear();
        }
      });
      draw.on('drawend', renderDustEsateAndListing);
    } else if (checkEstate() === 2) {
      document.getElementById('activeModule').innerHTML = 'Add Listing';
      draw.setActive(false);
      renderDustListing();
    } else {
      draw.setActive(false);
      document.getElementById('activeModule').innerHTML = 'Information';
      info.init();
    }
  }

  function init() {
    if (_.isEmpty(getInteraction('newEstate'))) {
      createDrawInteraction();
    }
    insert();
  }
  return {
    init: init
  };
}(window, document, Promise, jQuery, App, mdDateTimePicker, moment, dialogPolyfill, cloudinary));

var userMap = (function userMap(window, document, Promise, $, App) {
  'use strict';
  var context = 'admin';
  var lang = document.documentElement.lang;
  var $loading = $('.mdl-spinner');
  $(document)
  .ajaxStart(function start() {
    $('.spiner-wrapper').removeClass('visuallyhidden');
    $loading.addClass('is-active');
  })
  .ajaxStop(function stop() {
    $('.spiner-wrapper').addClass('visuallyhidden');
    $loading.removeClass('is-active');
  });
  toastr.options = {
    closeButton: false,
    debug: false,
    newestOnTop: false,
    progressBar: false,
    positionClass: 'toast-top-center',
    preventDuplicates: false,
    onclick: null,
    showDuration: '300',
    hideDuration: '1000',
    timeOut: '5000',
    extendedTimeOut: '1000',
    showEasing: 'swing',
    hideEasing: 'linear',
    showMethod: 'fadeIn',
    hideMethod: 'fadeOut'
  };
  function init() {
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/language',
        type: 'GET',
        data: {
          type: lang,
          context: context
        }
      })
      )
    .then(function resolve(data) {
      App.config.commons.trans = data;
      App.config.commons.map = App.config.modules.map.initialize();
    })
    .then(function resolve() {
      var moduleObserver;
      App.config.modules.info.init();
      moduleObserver = new MutationObserver(function moduleObserverChooser(mutations) {
        mutations.forEach(function foerEachMutation(mutation) {
          if (typeof mutation.target.dataset !== 'undefined') {
            if (mutation.target.dataset.active === 'insert') {
              App.config.modules.insert.init();
            } else if (mutation.target.dataset.active === 'delete') {
              App.config.modules.delete.init();
            } else if (mutation.target.dataset.active === 'edit') {
              App.config.modules.edit.init();
            }
          }
        });
      });
      moduleObserver.observe(document.querySelector('body'), {
        attributes: true
      });
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  return {
    init: init
  };
}(window, document, Promise, jQuery, App));

userMap.init();

$(function Dready() {
  var utils = App.utils;
  var addButton = document.getElementById('insert');
  var deleteButton = document.getElementById('delete');
  var editButton = document.querySelector('#edit');
  $('#logout').click(function logout() {
    location.href = '/logout';
  });
  document.getElementById('enter-fullscreen').addEventListener('click',
    function addClickEventToEnterFullsreen() {
      var elem = document.body;
      utils.requestFullScreen(elem);
      utils.removeClass(document.getElementById('exit-fullscreen').parentNode, 'visuallyhidden');
      utils.addClass(this.parentNode, 'visuallyhidden');
    }
  );
  document.getElementById('exit-fullscreen').addEventListener('click',
    function addClickEventToExitFullsreen() {
      var elem = document;
      utils.exitFullsreen(elem);
      utils.removeClass(document.getElementById('enter-fullscreen').parentNode, 'visuallyhidden');
      utils.addClass(this.parentNode, 'visuallyhidden');
    }
  );
  addButton.addEventListener('click', function activateInsertModule() {
    var body = document.querySelector('body');
    body.dataset.active = 'insert';
  });
  deleteButton.addEventListener('click', function activateDeleteModule() {
    var body = document.querySelector('body');
    body.dataset.active = 'delete';
  });
  editButton.addEventListener('click', function activateEditModule() {
    var body = document.querySelector('body');
    body.dataset.active = 'edit';
  });
  // console.log(bowser);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
