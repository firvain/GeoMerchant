var center=[3677385,4120949],extent=[3590094,4102833,3855483,4261211],lang=document.documentElement.lang,styleCache={},geoJSONFormat=new ol.format.GeoJSON({defaultDataProjection:"EPSG:4326"}),bing=new ol.layer.Tile({visible:!0,source:new ol.source.BingMaps({key:"Ak2Gq8VUfICsPpuf7LRANXmXt2sHWmSLPhohmVLFtFIEwYjs_5MCyAhAFwRSVpLj",imagerySet:"Aerial"}),maxZoom:19,crossOrigin:"anonymous",preload:1/0,id:"bing"}),mapbox=new ol.layer.Tile({source:new ol.source.XYZ({attributions:[new ol.Attribution({html:'<a href="https://www.mapbox.com/about/maps/" target="_blank">&copy; Mapbox &copy; OpenStreetMap</a>'})],url:"https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA"}),id:"mapbox"}),propertyStyleFunction=function(e,t){var o=e.get("features").length,r=propertySource.getFeatures().length,l=Math.round(.01*ol.extent.getWidth(propertySource.getExtent())+ol.extent.getHeight(propertySource.getExtent())/map.getView().getResolution()),n=styleCache[o];return n||(n=o>1?[new ol.style.Style({image:new ol.style.Circle({radius:l,stroke:new ol.style.Stroke({color:[156,39,176,1],width:5}),fill:new ol.style.Fill({color:[68,138,255,Math.min(.8,.4+o/r)]})}),text:new ol.style.Text({text:o.toString(),fill:new ol.style.Fill({color:"#FFFFFF"})}),zIndex:101})]:[new ol.style.Style({image:new ol.style.Icon({src:"../images/map-icons/pins/48/pin5.png",anchorOrigin:"bottom-left",anchor:[0,0],scale:1})})],styleCache[o]=n),n},propertySource=new ol.source.Vector({format:geoJSONFormat,loader:function(e,t,o){var r=ol.proj.transformExtent(e,"EPSG:3857","EPSG:4326"),l="http://localhost:3000/db/property?bbox[x1]="+r[0]+"&bbox[y1]="+r[1]+"&bbox[x2]="+r[2]+"&bbox[y2]="+r[3],n=this;this.clear(),$.ajax({url:l,type:"GET",dataType:"json"}).done(function(e){var t=geoJSONFormat.readFeatures(e,{featureProjection:"EPSG:3857"});n.addFeatures(t)}).fail(function(){console.log("error")})},strategy:ol.loadingstrategy.bbox}),propertyClusterSource=new ol.source.Cluster({distance:40,source:propertySource,attributions:[new ol.Attribution({html:'All maps © <a href="http://www.terracognita.gr/">Terra Cognita</a>'})]}),property=new ol.layer.Vector({source:propertyClusterSource,id:"estates",visible:!0,style:propertyStyleFunction});property.setZIndex(2);var PSAStyleFunction=function(e,t){var o,r=e.get("style");return o="el"===lang?e.get("name_el"):e.get("name_en"),styleCache[r]||(styleCache=[new ol.style.Style({image:new ol.style.Icon({src:"../images/maki/renders/"+r+"-24.png",anchorOrigin:"bottom-left",anchor:[.5,.5],scale:1}),text:new ol.style.Text({text:o,stroke:new ol.style.Stroke({color:[156,39,176,.8],width:1}),offsetY:12})})]),styleCache},PSA=new ol.layer.Vector({style:PSAStyleFunction,maxResolution:3});PSA.setZIndex(1);var map=new ol.Map({target:"map",layers:[mapbox,property,PSA],loadTilesWhileAnimating:!0,loadTilesWhileInteracting:!0,renderer:"canvas",controls:ol.control.defaults({attributionOptions:{collapsible:!1,collapsed:!1}}).extend([new ol.control.ScaleLine({units:"metric"}),new ol.control.OverviewMap({className:"ol-overviewmap ol-custom-overviewmap",collapsible:!0,collapsed:!0,layers:[bing]}),new ol.control.ZoomToExtent({extent:extent})]),view:new ol.View({center:center,extent:extent,projection:"EPSG:3857",zoom:14,maxZoom:19,minZoom:10})});"el"===lang?(bing.set("name","Δορυφορική εικόνα"),mapbox.set("name","Χάρτης"),property.set("name","Ακίνητα")):(bing.set("name","Sattelite Image"),mapbox.set("name","Map"),property.set("name","Properties"));
function showEstateInfo(){alert(1)}
!function(){var e=new ol.Geolocation({projection:map.getView().getProjection(),trackingOptions:{maximumAge:1e4,enableHighAccuracy:!0,timeout:6e5}}),o=new ol.Feature;e.on("change:accuracyGeometry",function(){o.setGeometry(e.getAccuracyGeometry())});var t=new ol.Feature;t.setStyle(new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"#3399CC"}),stroke:new ol.style.Stroke({color:"#fff",width:2})})})),e.on("change:position",function(){var o=e.getPosition();t.setGeometry(o?new ol.geom.Point(o):null)}),featuresOverlaySource=new ol.source.Vector({});new ol.layer.Vector({map:map,source:featuresOverlaySource});$(".geolocation").on("change",function(r){r.preventDefault(),$(this).prop("checked")===!0?(e.setTracking(!0),featuresOverlaySource.addFeatures([t,o])):(e.setTracking(!1),featuresOverlaySource.clear())})}();
!function(){function e(e){e.preventDefault();var t=e.coordinate;if(map.getView().getResolution()>4)map.getView().setResolution(2.388657133911758),map.getView().setCenter(t);else{var r={},o={},s=[];r.title=o,"el"===lang?(o.type="Τύπος",o.area="Εμβαδό",o.address="Διευθυνση",o.bedrooms="Υπνοδωμάτια",o.price="Τιμή",o["new"]="Νεόδμητο",o.furnished="Επιπλωμένο",o.pets="Επιτρέπονται Κατοικίδια"):(o.type="Type",o.area="Size",o.address="Address",o.bedrooms="Bedrooms",o.price="Price",o["new"]="Newly Build",o.furnished="Furnished",o.pets="Pets Allowed"),clickedFeature=map.forEachFeatureAtPixel(e.pixel,function(e,t){return{feature:e,layer:t}},this,function(e){return"estates"===e.get("id")?!0:void 0},this),clickedFeature&&(clickedFeature.feature.get("features").forEach(function(e){a=e;var t={};t.gid=e.get("gid"),t.type=e.get("estatetype"),t.area=e.get("estatearea"),"el"===lang?t.address=e.get("street_el")+" "+e.get("h_num_el"):t.address=e.get("street_en")+" "+e.get("h_num_en"),t.bedrooms=e.get("bedrooms"),t.price=e.get("price"),t.furnished=e.get("furnished"),t.pets=e.get("pets"),t["new"]=e.get("new"),s.push({feature:t}),featureCoordinate=e.get("geometry").getCoordinates(),r.features=s;var o=new ol.source.Vector({attributions:[new ol.Attribution({html:'POI by <a href="http://www.terracognita.gr/">Terra Cognita</a>'})],format:geoJSONFormat,loader:function(e,r,a){var o="http://localhost:3000/db/uses/"+t.gid,s=this;$.ajax({url:o,type:"GET",dataType:"json"}).done(function(e){var t=geoJSONFormat.readFeatures(e.property_services_analysis,{featureProjection:"EPSG:3857"}),r=new ol.style.Style({fill:new ol.style.Fill({color:[156,39,176,.1]})});t[0].setStyle(r),s.addFeatures(t)}).fail(function(){console.log("error")})},strategy:ol.loadingstrategy.all});PSA.setSource(o)}),dust.render("estateInfo.dust",r,function(e,t){$("#popup-content").html(t)}),dust.render("estateCards.dust",r,function(e,t){$(".estate-cards").html(t),$(".estate-cards").removeClass("visuallyhidden")}),map.getView().setCenter(featureCoordinate))}}$(".info").on("change",function(t){t.preventDefault(),$(this).prop("checked")===!0?map.on("click",e):map.un("click",e)})}();
!function(){function e(e){e.preventDefault();var r=n.getSource().getFeatures().length,a=e.coordinate;if(0===r)t.setGeometry(new ol.geom.Point(a)),t.setId("first"),n.getSource().addFeature(t),c[0]=a[0],c[1]=a[1];else if(1===r){var i=t.clone();i.setGeometry(new ol.geom.Point(a)),i.setId("second"),n.getSource().addFeature(i),c[2]=a[0],c[3]=a[1],o(c)}else n.getSource().clear()}function o(e){var o=ol.proj.transform([e[0],e[1]],"EPSG:3857","EPSG:4326"),t=ol.proj.transform([e[2],e[3]],"EPSG:3857","EPSG:4326"),r=o[0],a=o[1],c=t[0],i=t[1];$.ajax({url:"https://api.mapbox.com/v4/directions/mapbox.driving/"+r+","+a+";"+c+","+i+".json?alternatives=false&access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA",type:"GET",dataType:"json"}).done(function(e){var o={};o.type="Feature",o.geometry=e.routes[0].geometry,n.getSource().addFeatures(geoJSONFormat.readFeatures(o,{dataProjection:"EPSG:4326",featureProjection:"EPSG:3857"})),map.getView().fit(n.getSource().getExtent(),map.getSize())}).fail(function(){console.log("error")}).always(function(){console.log("complete")})}var t=new ol.Feature,r=new ol.style.Style({image:new ol.style.Icon({anchor:[.5,1],anchorXUnits:"fraction",anchorYUnits:"fraction",opacity:1,scale:1,src:"../images/map-icons/pins/24/pin1.png",snapToPixel:!1}),zIndex:100});t.setStyle(r);var a=new ol.style.Style({stroke:new ol.style.Stroke({color:"#408080",width:5,lineDash:[4,4]})}),n=new ol.layer.Vector({map:map,source:new ol.source.Vector,style:a,id:"route",nameEl:"Διαδρομή",NameEn:"Route"}),c=[];geoJSONFormat=new ol.format.GeoJSON({defaultDataProjection:"EPSG:4326",geometryName:"geometry"}),$(".marker").on("change",function(o){o.preventDefault(),$(this).prop("checked")===!0?map.on("singleclick",e):(map.un("singleclick",e),n.getSource().clear())})}();
!function(){$(".weather").change(function(){if($(this).prop("checked")===!0){map.getOverlays().forEach(function(e){"weather"===e.get("name")&&($(e.getElement()).parent().remove(),$(e.getElement()).remove())});var e=ol.proj.transform(map.getView().getCenter(),"EPSG:3857","EPSG:4326"),t=e[1],a=e[0];$.ajax({url:"http://api.openweathermap.org/data/2.5/find?lat="+t+"&lon="+a+"&cnt=5&cluster=no&units=metric&type=accurate&APPID=f9cd9fa2c427c3b115e87e4862619c5c",type:"GET",dataType:"json"}).done(function(e){function t(e,t){var a=document.createElement("div");return a.setAttribute("class","weather-popup default-primary-color mdl-shadow--6dp"),a.setAttribute("id",t),a.setAttribute("data-name","weather"),new ol.Overlay({element:a,position:e})}var a,r,n=e.list;$.each(n,function(e,n){r=ol.proj.transform([n.coord.lon,n.coord.lat],"EPSG:4326","EPSG:3857"),a=t(r,e),map.addOverlay(a),a.set("name","weather"),weatherData={name:n.name,temp:n.main.temp,pressure:n.main.pressure,humidity:n.main.humidity},dust.render("weatherPopup.dust",weatherData,function(t,a){$("#"+e).html(a)})})}).fail(function(){})}else $(this).prop("checked")===!1&&map.getOverlays().forEach(function(e){"weather"===e.get("name")&&($(e.getElement()).parent().remove(),$(e.getElement()).remove())})})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyIsImVzdGF0ZUNhcmQuanMiLCJnZW9sb2NhdGlvbi5qcyIsImluZm8uanMiLCJyb3V0aW5nLmpzIiwid2VhdGhlci5qcyJdLCJuYW1lcyI6WyJjZW50ZXIiLCJleHRlbnQiLCJsYW5nIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZUNhY2hlIiwiZ2VvSlNPTkZvcm1hdCIsIm9sIiwiZm9ybWF0IiwiR2VvSlNPTiIsImRlZmF1bHREYXRhUHJvamVjdGlvbiIsImJpbmciLCJsYXllciIsIlRpbGUiLCJ2aXNpYmxlIiwic291cmNlIiwiQmluZ01hcHMiLCJrZXkiLCJpbWFnZXJ5U2V0IiwibWF4Wm9vbSIsImNyb3NzT3JpZ2luIiwicHJlbG9hZCIsIkluZmluaXR5IiwiaWQiLCJtYXBib3giLCJYWVoiLCJhdHRyaWJ1dGlvbnMiLCJBdHRyaWJ1dGlvbiIsImh0bWwiLCJ1cmwiLCJwcm9wZXJ0eVN0eWxlRnVuY3Rpb24iLCJmZWF0dXJlIiwicmVzb2x1dGlvbiIsInNpemUiLCJnZXQiLCJsZW5ndGgiLCJtYXhGZWF0dXJlQ291bnQiLCJwcm9wZXJ0eVNvdXJjZSIsImdldEZlYXR1cmVzIiwicmFkaXVzIiwiTWF0aCIsInJvdW5kIiwiZ2V0V2lkdGgiLCJnZXRFeHRlbnQiLCJnZXRIZWlnaHQiLCJtYXAiLCJnZXRWaWV3IiwiZ2V0UmVzb2x1dGlvbiIsInN0eWxlIiwiU3R5bGUiLCJpbWFnZSIsIkNpcmNsZSIsInN0cm9rZSIsIlN0cm9rZSIsImNvbG9yIiwid2lkdGgiLCJmaWxsIiwiRmlsbCIsIm1pbiIsInRleHQiLCJUZXh0IiwidG9TdHJpbmciLCJ6SW5kZXgiLCJJY29uIiwic3JjIiwiYW5jaG9yT3JpZ2luIiwiYW5jaG9yIiwic2NhbGUiLCJWZWN0b3IiLCJsb2FkZXIiLCJwcm9qZWN0aW9uIiwiZXBzZzQzMjZFeHRlbnQiLCJwcm9qIiwidHJhbnNmb3JtRXh0ZW50IiwidGhhdCIsInRoaXMiLCJjbGVhciIsIiQiLCJhamF4IiwidHlwZSIsImRhdGFUeXBlIiwiZG9uZSIsInJlc3BvbnNlIiwiZmVhdHVyZXMiLCJyZWFkRmVhdHVyZXMiLCJmZWF0dXJlUHJvamVjdGlvbiIsImFkZEZlYXR1cmVzIiwiZmFpbCIsImNvbnNvbGUiLCJsb2ciLCJzdHJhdGVneSIsImxvYWRpbmdzdHJhdGVneSIsImJib3giLCJwcm9wZXJ0eUNsdXN0ZXJTb3VyY2UiLCJDbHVzdGVyIiwiZGlzdGFuY2UiLCJwcm9wZXJ0eSIsInNldFpJbmRleCIsIlBTQVN0eWxlRnVuY3Rpb24iLCJzeW1ib2wiLCJvZmZzZXRZIiwiUFNBIiwibWF4UmVzb2x1dGlvbiIsIk1hcCIsInRhcmdldCIsImxheWVycyIsImxvYWRUaWxlc1doaWxlQW5pbWF0aW5nIiwibG9hZFRpbGVzV2hpbGVJbnRlcmFjdGluZyIsInJlbmRlcmVyIiwiY29udHJvbHMiLCJjb250cm9sIiwiZGVmYXVsdHMiLCJhdHRyaWJ1dGlvbk9wdGlvbnMiLCJjb2xsYXBzaWJsZSIsImNvbGxhcHNlZCIsImV4dGVuZCIsIlNjYWxlTGluZSIsInVuaXRzIiwiT3ZlcnZpZXdNYXAiLCJjbGFzc05hbWUiLCJab29tVG9FeHRlbnQiLCJ2aWV3IiwiVmlldyIsInpvb20iLCJtaW5ab29tIiwic2V0Iiwic2hvd0VzdGF0ZUluZm8iLCJhbGVydCIsImdlb2xvY2F0aW9uIiwiR2VvbG9jYXRpb24iLCJnZXRQcm9qZWN0aW9uIiwidHJhY2tpbmdPcHRpb25zIiwibWF4aW11bUFnZSIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsInRpbWVvdXQiLCJhY2N1cmFjeUZlYXR1cmUiLCJGZWF0dXJlIiwib24iLCJzZXRHZW9tZXRyeSIsImdldEFjY3VyYWN5R2VvbWV0cnkiLCJwb3NpdGlvbkZlYXR1cmUiLCJzZXRTdHlsZSIsImNvb3JkaW5hdGVzIiwiZ2V0UG9zaXRpb24iLCJnZW9tIiwiUG9pbnQiLCJmZWF0dXJlc092ZXJsYXlTb3VyY2UiLCJlIiwicHJldmVudERlZmF1bHQiLCJwcm9wIiwic2V0VHJhY2tpbmciLCJoYW5kbGVJbmZvIiwiZXZ0IiwiY29vcmRpbmF0ZSIsInNldFJlc29sdXRpb24iLCJzZXRDZW50ZXIiLCJvYmoiLCJ0aXRsZSIsImFyZWEiLCJhZGRyZXNzIiwiYmVkcm9vbXMiLCJwcmljZSIsImZ1cm5pc2hlZCIsInBldHMiLCJjbGlja2VkRmVhdHVyZSIsImZvckVhY2hGZWF0dXJlQXRQaXhlbCIsInBpeGVsIiwiZm9yRWFjaCIsImYiLCJhIiwiZ2lkIiwicHVzaCIsImZlYXR1cmVDb29yZGluYXRlIiwiZ2V0Q29vcmRpbmF0ZXMiLCJQU0FTb3VyY2UiLCJwcm9wZXJ0eV9zZXJ2aWNlc19hbmFseXNpcyIsImFsbCIsInNldFNvdXJjZSIsImR1c3QiLCJyZW5kZXIiLCJlcnIiLCJvdXQiLCJyZW1vdmVDbGFzcyIsInVuIiwiaGFuZGxlTWFya2VyIiwiZXZlbnQiLCJmZWF0dXJlQ291bnQiLCJmZWF0dXJlc092ZXJsYXkiLCJnZXRTb3VyY2UiLCJtYXJrZXIiLCJzZXRJZCIsImFkZEZlYXR1cmUiLCJyb3V0ZUNvb3JkcyIsImNsb25lIiwiY2FsbFJvdXRlIiwiZmlyc3QiLCJ0cmFuc2Zvcm0iLCJzZWNvbmQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImRhdGEiLCJyb3V0ZSIsImdlb21ldHJ5Iiwicm91dGVzIiwiZGF0YVByb2plY3Rpb24iLCJmaXQiLCJnZXRTaXplIiwiYWx3YXlzIiwiaWNvblN0eWxlIiwiYW5jaG9yWFVuaXRzIiwiYW5jaG9yWVVuaXRzIiwib3BhY2l0eSIsInNuYXBUb1BpeGVsIiwiZmVhdHVyZXNPdmVybGF5U3R5bGUiLCJsaW5lRGFzaCIsIm5hbWVFbCIsIk5hbWVFbiIsImdlb21ldHJ5TmFtZSIsImNoYW5nZSIsImdldE92ZXJsYXlzIiwib3ZsIiwiZ2V0RWxlbWVudCIsInBhcmVudCIsInJlbW92ZSIsImdldENlbnRlciIsImxhdCIsImxvbiIsImNyZWF0ZVdlYXRoZXJPdmVybGF5IiwicG9zaXRpb24iLCJpbmRleCIsImVsZW0iLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiT3ZlcmxheSIsImVsZW1lbnQiLCJvdmVybGF5Iiwib2JqcyIsImxpc3QiLCJlYWNoIiwidmFsIiwiY29vcmQiLCJhZGRPdmVybGF5Iiwid2VhdGhlckRhdGEiLCJuYW1lIiwidGVtcCIsIm1haW4iLCJwcmVzc3VyZSIsImh1bWlkaXR5Il0sIm1hcHBpbmdzIjoiQUFBQyxHQUFJQSxTQUFVLFFBQVMsU0FDckJDLFFBQVUsUUFBUyxRQUFTLFFBQVMsU0FDckNDLEtBQU9DLFNBQVNDLGdCQUFnQkYsS0FDaENHLGNBQ0FDLGNBQWdCLEdBQUlDLElBQUdDLE9BQU9DLFNBQzVCQyxzQkFBdUIsY0FFdkJDLEtBQU8sR0FBSUosSUFBR0ssTUFBTUMsTUFDdEJDLFNBQVMsRUFDVEMsT0FBUSxHQUFJUixJQUFHUSxPQUFPQyxVQUNwQkMsSUFBSyxtRUFDTEMsV0FBWSxXQUVkQyxRQUFTLEdBQ1RDLFlBQWEsWUFDYkMsUUFBU0MsRUFBQUEsRUFDVEMsR0FBSSxTQUVGQyxPQUFTLEdBQUlqQixJQUFHSyxNQUFNQyxNQUN4QkUsT0FBUSxHQUFJUixJQUFHUSxPQUFPVSxLQUNwQkMsY0FBZSxHQUFJbkIsSUFBR29CLGFBQ3BCQyxLQUFNLHlHQUVSQyxJQUFLLDZLQUVQTixHQUFJLFdBRUZPLHNCQUF3QixTQUFTQyxFQUFTQyxHQUM1QyxHQUFJQyxHQUFPRixFQUFRRyxJQUFJLFlBQVlDLE9BQy9CQyxFQUFtQkMsZUFBZUMsY0FBY0gsT0FDaERJLEVBQVFDLEtBQUtDLE1BQU8sSUFBT2xDLEdBQUdOLE9BQU95QyxTQUFTTCxlQUFlTSxhQUFhcEMsR0FBR04sT0FBTzJDLFVBQVVQLGVBQWVNLGFBQWNFLElBQUlDLFVBQVVDLGlCQUN6SUMsRUFBUTNDLFdBQVc0QixFQW1DdkIsT0FsQ0tlLEtBRUZBLEVBREVmLEVBQU8sR0FDQSxHQUFJMUIsSUFBR3lDLE1BQU1DLE9BQ3JCQyxNQUFPLEdBQUkzQyxJQUFHeUMsTUFBTUcsUUFDbEJaLE9BQVFBLEVBQ1JhLE9BQVEsR0FBSTdDLElBQUd5QyxNQUFNSyxRQUNuQkMs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QUVoQmxLLEdBQUVtSyxLQUFLRixFQUFNLFNBQVNQLEVBQU9VLEdBQzNCbkcsRUFBY3ZJLEdBQUdpRSxLQUFLNEgsV0FBVzZDLEVBQUlDLE1BQU1kLElBQUthLEVBQUlDLE1BQU1mLEtBQU0sWUFBYSxhQUM3RVUsRUFBVVIsRUFBcUJ2RixFQUFheUYsR0FDNUMxTCxJQUFJc00sV0FBV04sR0FDZkEsRUFBUWhILElBQUksT0FBUSxXQUNwQnVILGFBQ0VDLEtBQVFKLEVBQUlJLEtBQ1pDLEtBQVFMLEVBQUlNLEtBQUtELEtBQ2pCRSxTQUFZUCxFQUFJTSxLQUFLQyxTQUNyQkMsU0FBWVIsRUFBSU0sS0FBS0UsVUFFdkJ2RSxLQUFLQyxPQUFPLG9CQUFxQmlFLFlBQWEsU0FBU2hFLEVBQUtDLEdBQzFEeEcsRUFBRSxJQUFNMEosR0FBTzNNLEtBQUt5SixTQUd2QjlGLEtBQUssa0JBR0NWLEdBQUVGLE1BQU0wRSxLQUFLLGNBQWUsR0FDckN4RyxJQUFJZ0wsY0FBY3RELFFBQVEsU0FBU3VELEdBQ1QsWUFBcEJBLEVBQUk1TCxJQUFJLFVBQ1QyQyxFQUFFaUosRUFBSUMsY0FBY0MsU0FBVUMsU0FDL0JwSixFQUFFaUosRUFBSUMsY0FBY0UiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgdmFyIGNlbnRlciA9IFszNjc3Mzg1LCA0MTIwOTQ5XSxcclxuICAgZXh0ZW50ID0gWzM1OTAwOTQsIDQxMDI4MzMsIDM4NTU0ODMsIDQyNjEyMTFdLFxyXG4gICBsYW5nID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcsXHJcbiAgIHN0eWxlQ2FjaGUgPSB7fSxcclxuICAgZ2VvSlNPTkZvcm1hdCA9IG5ldyBvbC5mb3JtYXQuR2VvSlNPTih7XHJcbiAgICAgZGVmYXVsdERhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2J1xyXG4gICB9KTtcclxuIHZhciBiaW5nID0gbmV3IG9sLmxheWVyLlRpbGUoe1xyXG4gICB2aXNpYmxlOiB0cnVlLFxyXG4gICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuQmluZ01hcHMoe1xyXG4gICAgIGtleTogJ0FrMkdxOFZVZklDc1BwdWY3TFJBTlhtWHQyc0hXbVNMUGhvaG1WTEZ0RklFd1lqc181TUN5QWhBRndSU1ZwTGonLFxyXG4gICAgIGltYWdlcnlTZXQ6ICdBZXJpYWwnXHJcbiAgIH0pLFxyXG4gICBtYXhab29tOiAxOSxcclxuICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxyXG4gICBwcmVsb2FkOiBJbmZpbml0eSxcclxuICAgaWQ6ICdiaW5nJ1xyXG4gfSk7XHJcbiB2YXIgbWFwYm94ID0gbmV3IG9sLmxheWVyLlRpbGUoe1xyXG4gICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKHtcclxuICAgICBhdHRyaWJ1dGlvbnM6IFtuZXcgb2wuQXR0cmlidXRpb24oe1xyXG4gICAgICAgaHRtbDogJzxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lm1hcGJveC5jb20vYWJvdXQvbWFwcy9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj4mY29weTsgTWFwYm94ICZjb3B5OyBPcGVuU3RyZWV0TWFwPC9hPidcclxuICAgICB9KV0sXHJcbiAgICAgdXJsOiAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS92NC9tYXBib3guc3RyZWV0cy97en0ve3h9L3t5fS5wbmc/YWNjZXNzX3Rva2VuPXBrLmV5SjFJam9pWm1seWRtRnBiaUlzSW1FaU9pSmxPV1l5WVRNME5UaGlOV00wWWpKak9ESmpOREU0T0RRek56QTJNR1F5TmlKOS4tTlZETzI3SHp0LXdfblFvc1VQZkxBJ1xyXG4gICB9KSxcclxuICAgaWQ6ICdtYXBib3gnXHJcbiB9KTtcclxuIHZhciBwcm9wZXJ0eVN0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKSB7XHJcbiAgIHZhciBzaXplID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykubGVuZ3RoO1xyXG4gICB2YXIgbWF4RmVhdHVyZUNvdW50ID0gIHByb3BlcnR5U291cmNlLmdldEZlYXR1cmVzKCkubGVuZ3RoO1xyXG4gICB2YXIgcmFkaXVzID1NYXRoLnJvdW5kKCAwLjAxICogb2wuZXh0ZW50LmdldFdpZHRoKHByb3BlcnR5U291cmNlLmdldEV4dGVudCgpKStvbC5leHRlbnQuZ2V0SGVpZ2h0KHByb3BlcnR5U291cmNlLmdldEV4dGVudCgpKS8obWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCkpKTtcclxuICAgdmFyIHN0eWxlID0gc3R5bGVDYWNoZVtzaXplXTtcclxuICAgaWYgKCFzdHlsZSkge1xyXG4gICAgaWYgKHNpemUgPiAxKXtcclxuICAgICAgc3R5bGUgPSBbbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcclxuICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XHJcbiAgICAgICAgICAgY29sb3I6IFsxNTYsIDM5LCAxNzYsMV0sXHJcbiAgICAgICAgICAgd2lkdGg6IDVcclxuICAgICAgICAgfSksXHJcbiAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcclxuICAgICAgICAgICBjb2xvcjogWzY4LCAxMzgsIDI1NSwgTWF0aC5taW4oMC44LCAwLjQgKyAoc2l6ZSAvIG1heEZlYXR1cmVDb3VudCkpXVxyXG4gICAgICAgICB9KVxyXG4gICAgICAgfSksXHJcbiAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XHJcbiAgICAgICAgIHRleHQ6IHNpemUudG9TdHJpbmcoKSxcclxuICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xyXG4gICAgICAgICAgIGNvbG9yOiAnI0ZGRkZGRidcclxuICAgICAgICAgfSlcclxuICAgICAgIH0pLFxyXG4gICAgICAgekluZGV4OiAxMDFcclxuICAgICB9KV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdHlsZSA9IFtuZXcgb2wuc3R5bGUuU3R5bGUoe1xyXG4gICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuSWNvbigoe1xyXG4gICAgICAgICBzcmM6ICcuLi9pbWFnZXMvbWFwLWljb25zL3BpbnMvNDgvcGluNS5wbmcnLFxyXG4gICAgICAgICBhbmNob3JPcmlnaW46ICdib3R0b20tbGVmdCcsXHJcbiAgICAgICAgIGFuY2hvcjogWzAsMF0sXHJcbiAgICAgICAgIHNjYWxlOiAxLFxyXG4gICAgICAgfSkpXHJcbiAgICAgIH0pXTtcclxuICAgIH1cclxuICAgICBcclxuICAgICBzdHlsZUNhY2hlW3NpemVdID0gc3R5bGU7XHJcbiAgIH1cclxuICAgcmV0dXJuIHN0eWxlO1xyXG4gfTtcclxuIHZhciBwcm9wZXJ0eVNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcclxuICAgZm9ybWF0OiBnZW9KU09ORm9ybWF0LFxyXG4gICBsb2FkZXI6IGZ1bmN0aW9uKGV4dGVudCwgcmVzb2x1dGlvbiwgcHJvamVjdGlvbikge1xyXG4gICAgIHZhciBlcHNnNDMyNkV4dGVudCA9IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KGV4dGVudCwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKTtcclxuICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9kYi9wcm9wZXJ0eT9iYm94W3gxXT0nICsgZXBzZzQzMjZFeHRlbnRbMF0gKyAnJmJib3hbeTFdPScgKyBlcHNnNDMyNkV4dGVudFsxXSArICcmYmJveFt4Ml09JyArIGVwc2c0MzI2RXh0ZW50WzJdICsgJyZiYm94W3kyXT0nICsgZXBzZzQzMjZFeHRlbnRbM107XHJcbiAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAkLmFqYXgoe1xyXG4gICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgfSkuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgdmFyIGZlYXR1cmVzID0gZ2VvSlNPTkZvcm1hdC5yZWFkRmVhdHVyZXMocmVzcG9uc2UsIHtcclxuICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246ICdFUFNHOjM4NTcnXHJcbiAgICAgICB9KTtcclxuICAgICAgIC8vIHRoYXQuY2xlYXIoKTtcclxuICAgICAgIHRoYXQuYWRkRmVhdHVyZXMoZmVhdHVyZXMpO1xyXG4gICAgIH0pLmZhaWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICBjb25zb2xlLmxvZyhcImVycm9yXCIpO1xyXG4gICAgIH0pO1xyXG4gICB9LFxyXG4gICBzdHJhdGVneTogb2wubG9hZGluZ3N0cmF0ZWd5LmJib3hcclxuIH0pO1xyXG4gdmFyIHByb3BlcnR5Q2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XHJcbiAgIGRpc3RhbmNlOiA0MCxcclxuICAgc291cmNlOiBwcm9wZXJ0eVNvdXJjZSxcclxuICAgYXR0cmlidXRpb25zOiBbbmV3IG9sLkF0dHJpYnV0aW9uKHtcclxuICAgICBodG1sOiAnQWxsIG1hcHMgwqkgJyArICc8YSBocmVmPVwiaHR0cDovL3d3dy50ZXJyYWNvZ25pdGEuZ3IvXCI+VGVycmEgQ29nbml0YTwvYT4nXHJcbiAgIH0pXVxyXG4gfSk7XHJcbiB2YXIgcHJvcGVydHkgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcclxuICAgc291cmNlOiBwcm9wZXJ0eUNsdXN0ZXJTb3VyY2UsXHJcbiAgIGlkOiAnZXN0YXRlcycsXHJcbiAgIHZpc2libGU6IHRydWUsXHJcbiAgIHN0eWxlOiBwcm9wZXJ0eVN0eWxlRnVuY3Rpb25cclxuIH0pO1xyXG4gcHJvcGVydHkuc2V0WkluZGV4KDIpO1xyXG4gdmFyIFBTQVN0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKSB7XHJcbiAgIHZhciBzeW1ib2wgPSBmZWF0dXJlLmdldCgnc3R5bGUnKTtcclxuICAgdmFyIHRleHQ7XHJcbiAgIGlmIChsYW5nID09PSAnZWwnKSB7XHJcbiAgICAgdGV4dCA9IGZlYXR1cmUuZ2V0KCduYW1lX2VsJyk7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgdGV4dCA9IGZlYXR1cmUuZ2V0KCduYW1lX2VuJyk7XHJcbiAgIH1cclxuICAgaWYgKCFzdHlsZUNhY2hlW3N5bWJvbF0pIHtcclxuICAgICBzdHlsZUNhY2hlID0gW25ldyBvbC5zdHlsZS5TdHlsZSh7XHJcbiAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkljb24oKHtcclxuICAgICAgICAgc3JjOiAnLi4vaW1hZ2VzL21ha2kvcmVuZGVycy8nICsgc3ltYm9sICsgJy0yNC5wbmcnLFxyXG4gICAgICAgICBhbmNob3JPcmlnaW46ICdib3R0b20tbGVmdCcsXHJcbiAgICAgICAgIGFuY2hvcjogWzAuNSwgMC41XSxcclxuICAgICAgICAgc2NhbGU6IDEsXHJcbiAgICAgICB9KSksXHJcbiAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XHJcbiAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XHJcbiAgICAgICAgICAgY29sb3I6IFsxNTYsIDM5LCAxNzYsIDAuOF0sXHJcbiAgICAgICAgICAgd2lkdGg6IDFcclxuICAgICAgICAgfSksXHJcbiAgICAgICAgIG9mZnNldFk6IDEyXHJcbiAgICAgICB9KVxyXG4gICAgIH0pXTtcclxuICAgfVxyXG4gICByZXR1cm4gc3R5bGVDYWNoZTtcclxuIH07XHJcbiB2YXIgUFNBID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XHJcbiAgIHN0eWxlOiBQU0FTdHlsZUZ1bmN0aW9uLFxyXG4gICBtYXhSZXNvbHV0aW9uOiAzXHJcbiB9KTtcclxuIFBTQS5zZXRaSW5kZXgoMSk7XHJcbiB2YXIgbWFwID0gbmV3IG9sLk1hcCh7XHJcbiAgIHRhcmdldDogJ21hcCcsXHJcbiAgIGxheWVyczogW21hcGJveCwgcHJvcGVydHksIFBTQV0sXHJcbiAgIGxvYWRUaWxlc1doaWxlQW5pbWF0aW5nOiB0cnVlLFxyXG4gICBsb2FkVGlsZXNXaGlsZUludGVyYWN0aW5nOiB0cnVlLFxyXG4gICByZW5kZXJlcjogJ2NhbnZhcycsXHJcbiAgIGNvbnRyb2xzOiBvbC5jb250cm9sLmRlZmF1bHRzKHtcclxuICAgICBhdHRyaWJ1dGlvbk9wdGlvbnM6IHtcclxuICAgICAgIGNvbGxhcHNpYmxlOiBmYWxzZSxcclxuICAgICAgIGNvbGxhcHNlZDogZmFsc2VcclxuICAgICB9XHJcbiAgIH0pLmV4dGVuZChbXHJcbiAgICAgbmV3IG9sLmNvbnRyb2wuU2NhbGVMaW5lKHtcclxuICAgICAgIHVuaXRzOiAnbWV0cmljJ1xyXG4gICAgIH0pLCBuZXcgb2wuY29udHJvbC5PdmVydmlld01hcCh7XHJcbiAgICAgICBjbGFzc05hbWU6ICdvbC1vdmVydmlld21hcCBvbC1jdXN0b20tb3ZlcnZpZXdtYXAnLFxyXG4gICAgICAgY29sbGFwc2libGU6IHRydWUsXHJcbiAgICAgICBjb2xsYXBzZWQ6IHRydWUsXHJcbiAgICAgICBsYXllcnM6IFtiaW5nXVxyXG4gICAgIH0pLFxyXG4gICAgIG5ldyBvbC5jb250cm9sLlpvb21Ub0V4dGVudCh7XHJcbiAgICAgICBleHRlbnQ6IGV4dGVudFxyXG4gICAgIH0pXHJcbiAgIF0pLFxyXG4gICB2aWV3OiBuZXcgb2wuVmlldyh7XHJcbiAgICAgY2VudGVyOiBjZW50ZXIsXHJcbiAgICAgZXh0ZW50OiBleHRlbnQsXHJcbiAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXHJcbiAgICAgem9vbTogMTQsXHJcbiAgICAgbWF4Wm9vbTogMTksXHJcbiAgICAgbWluWm9vbTogMTBcclxuICAgfSksXHJcbiB9KTtcclxuIGlmIChsYW5nID09PSAnZWwnKSB7XHJcbiAgIGJpbmcuc2V0KCduYW1lJywgJ86Uzr/Pgc+Fz4bOv8+BzrnOus6uIM61zrnOus+Mzr3OsScpO1xyXG4gICBtYXBib3guc2V0KCduYW1lJywgJ86nzqzPgc+EzrfPgicpO1xyXG4gICBwcm9wZXJ0eS5zZXQoJ25hbWUnLCAnzpHOus6vzr3Ot8+EzrEnKTtcclxuIH0gZWxzZSB7XHJcbiAgIGJpbmcuc2V0KCduYW1lJywgJ1NhdHRlbGl0ZSBJbWFnZScpO1xyXG4gICBtYXBib3guc2V0KCduYW1lJywgJ01hcCcpO1xyXG4gICBwcm9wZXJ0eS5zZXQoJ25hbWUnLCAnUHJvcGVydGllcycpO1xyXG4gfVxyXG4iLCJmdW5jdGlvbiBzaG93RXN0YXRlSW5mbyAoKSB7XHJcbiAgLy8gYm9keS4uLlxyXG4gIGFsZXJ0KDEpO1xyXG59IiwiKGZ1bmN0aW9uKCkge1xyXG4gIHZhciBnZW9sb2NhdGlvbiA9IG5ldyBvbC5HZW9sb2NhdGlvbih7XHJcbiAgICAvLyB0YWtlIHRoZSBwcm9qZWN0aW9uIHRvIHVzZSBmcm9tIHRoZSBtYXAncyB2aWV3XHJcbiAgICBwcm9qZWN0aW9uOiBtYXAuZ2V0VmlldygpLmdldFByb2plY3Rpb24oKSxcclxuICAgIHRyYWNraW5nT3B0aW9uczoge1xyXG4gICAgICBtYXhpbXVtQWdlOiAxMDAwMCxcclxuICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICB0aW1lb3V0OiA2MDAwMDBcclxuICAgIH1cclxuICB9KTtcclxuICB2YXIgYWNjdXJhY3lGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoKTtcclxuICBnZW9sb2NhdGlvbi5vbignY2hhbmdlOmFjY3VyYWN5R2VvbWV0cnknLCBmdW5jdGlvbigpIHtcclxuICAgIGFjY3VyYWN5RmVhdHVyZS5zZXRHZW9tZXRyeShnZW9sb2NhdGlvbi5nZXRBY2N1cmFjeUdlb21ldHJ5KCkpO1xyXG4gIH0pO1xyXG4gIHZhciBwb3NpdGlvbkZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSgpO1xyXG4gIHBvc2l0aW9uRmVhdHVyZS5zZXRTdHlsZShuZXcgb2wuc3R5bGUuU3R5bGUoe1xyXG4gICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xyXG4gICAgICByYWRpdXM6IDYsXHJcbiAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcclxuICAgICAgICBjb2xvcjogJyMzMzk5Q0MnXHJcbiAgICAgIH0pLFxyXG4gICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xyXG4gICAgICAgIGNvbG9yOiAnI2ZmZicsXHJcbiAgICAgICAgd2lkdGg6IDJcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfSkpO1xyXG4gIC8vIGxpc3RlbiB0byBjaGFuZ2VzIGluIHBvc2l0aW9uXHJcbiAgZ2VvbG9jYXRpb24ub24oJ2NoYW5nZTpwb3NpdGlvbicsIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGNvb3JkaW5hdGVzID0gZ2VvbG9jYXRpb24uZ2V0UG9zaXRpb24oKTtcclxuICAgIHBvc2l0aW9uRmVhdHVyZS5zZXRHZW9tZXRyeShjb29yZGluYXRlcyA/IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGVzKSA6IG51bGwpO1xyXG4gIH0pO1xyXG4gIGZlYXR1cmVzT3ZlcmxheVNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHt9KTtcclxuICB2YXIgZmVhdHVyZXNPdmVybGF5ID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XHJcbiAgICBtYXA6IG1hcCxcclxuICAgIHNvdXJjZTogZmVhdHVyZXNPdmVybGF5U291cmNlXHJcbiAgfSk7XHJcbiAgJCgnLmdlb2xvY2F0aW9uJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICgkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICBnZW9sb2NhdGlvbi5zZXRUcmFja2luZyh0cnVlKTtcclxuICAgICAgZmVhdHVyZXNPdmVybGF5U291cmNlLmFkZEZlYXR1cmVzKFtwb3NpdGlvbkZlYXR1cmUsYWNjdXJhY3lGZWF0dXJlXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBnZW9sb2NhdGlvbi5zZXRUcmFja2luZyhmYWxzZSk7XHJcbiAgICAgIGZlYXR1cmVzT3ZlcmxheVNvdXJjZS5jbGVhcigpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KCkpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgLy8gdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3B1cCcpO1xyXG4gIC8vIHZhciBjbG9zZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wdXAtY2xvc2VyJyk7XHJcbiAgLy8gY2xvc2VyLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcclxuICAvLyAgIGluZm8uc2V0UG9zaXRpb24odW5kZWZpbmVkKTtcclxuICAvLyAgIGNsb3Nlci5ibHVyKCk7XHJcbiAgLy8gICByZXR1cm4gZmFsc2U7XHJcbiAgLy8gfTtcclxuICAvLyB2YXIgaW5mbyA9IG5ldyBvbC5PdmVybGF5KCh7XHJcbiAgLy8gICBlbGVtZW50OiBjb250YWluZXIsXHJcbiAgLy8gICBhdXRvUGFuOiB0cnVlLFxyXG4gIC8vICAgYXV0b1BhbkFuaW1hdGlvbjoge1xyXG4gIC8vICAgICBkdXJhdGlvbjogMjUwXHJcbiAgLy8gICB9XHJcbiAgLy8gfSkpO1xyXG4gIC8vIG1hcC5hZGRPdmVybGF5KGluZm8pO1xyXG4gIGZ1bmN0aW9uIGhhbmRsZUluZm8oZXZ0KSB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHZhciBjb29yZGluYXRlID0gZXZ0LmNvb3JkaW5hdGU7XHJcbiAgICBpZiAobWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCkgPiA0KSB7XHJcbiAgICAgIG1hcC5nZXRWaWV3KCkuc2V0UmVzb2x1dGlvbigyLjM4ODY1NzEzMzkxMTc1OCk7XHJcbiAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKGNvb3JkaW5hdGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICB2YXIgdGl0bGUgPSB7fTtcclxuICAgICAgdmFyIGZlYXR1cmVzID0gW107XHJcbiAgICAgIG9iai50aXRsZSA9IHRpdGxlO1xyXG4gICAgICBpZiAobGFuZyA9PT0gJ2VsJykge1xyXG4gICAgICAgIHRpdGxlLnR5cGUgPSAnzqTPjc+Azr/Pgic7XHJcbiAgICAgICAgdGl0bGUuYXJlYSA9ICfOlc68zrLOsc60z4wnO1xyXG4gICAgICAgIHRpdGxlLmFkZHJlc3MgPSAnzpTOuc61z4XOuM+Fzr3Pg863JztcclxuICAgICAgICB0aXRsZS5iZWRyb29tcyA9ICfOpc+Azr3Ov860z4nOvM6sz4TOuc6xJztcclxuICAgICAgICB0aXRsZS5wcmljZSA9ICfOpM65zrzOric7XHJcbiAgICAgICAgdGl0bGUubmV3ID0gJ86dzrXPjM60zrzOt8+Ezr8nO1xyXG4gICAgICAgIHRpdGxlLmZ1cm5pc2hlZCA9ICfOlc+AzrnPgM67z4nOvM6tzr3Ovyc7XHJcbiAgICAgICAgdGl0bGUucGV0cyA9ICfOlc+AzrnPhM+Bzq3PgM6/zr3PhM6xzrkgzprOsc+Ezr/Ouc66zq/OtM65zrEnO1xyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aXRsZS50eXBlID0gJ1R5cGUnO1xyXG4gICAgICAgIHRpdGxlLmFyZWEgPSAnU2l6ZSc7XHJcbiAgICAgICAgdGl0bGUuYWRkcmVzcyA9ICdBZGRyZXNzJztcclxuICAgICAgICB0aXRsZS5iZWRyb29tcyA9ICdCZWRyb29tcyc7XHJcbiAgICAgICAgdGl0bGUucHJpY2UgPSAnUHJpY2UnO1xyXG4gICAgICAgIHRpdGxlLm5ldyA9ICdOZXdseSBCdWlsZCc7XHJcbiAgICAgICAgdGl0bGUuZnVybmlzaGVkID0gJ0Z1cm5pc2hlZCc7XHJcbiAgICAgICAgdGl0bGUucGV0cyA9ICdQZXRzIEFsbG93ZWQnO1xyXG4gICAgICB9XHJcbiAgICAgIGNsaWNrZWRGZWF0dXJlID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChldnQucGl4ZWwsIGZ1bmN0aW9uKGZlYXR1cmUsIGxheWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGZlYXR1cmU6IGZlYXR1cmUsXHJcbiAgICAgICAgICBsYXllcjogbGF5ZXJcclxuICAgICAgICB9O1xyXG4gICAgICB9LCB0aGlzLCBmdW5jdGlvbihsYXllcikge1xyXG4gICAgICAgIGlmIChsYXllci5nZXQoJ2lkJykgPT09ICdlc3RhdGVzJykge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB0aGlzKTtcclxuICAgICAgaWYgKGNsaWNrZWRGZWF0dXJlKSB7XHJcbiAgICAgICAgY2xpY2tlZEZlYXR1cmUuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykuZm9yRWFjaChmdW5jdGlvbihmKSB7XHJcbiAgICAgICAgICBhPWY7XHJcbiAgICAgICAgICB2YXIgZmVhdHVyZSA9IHt9O1xyXG4gICAgICAgICAgZmVhdHVyZS5naWQgPSBmLmdldCgnZ2lkJyk7XHJcbiAgICAgICAgICBmZWF0dXJlLnR5cGUgPSBmLmdldCgnZXN0YXRldHlwZScpO1xyXG4gICAgICAgICAgZmVhdHVyZS5hcmVhID0gZi5nZXQoJ2VzdGF0ZWFyZWEnKTtcclxuICAgICAgICAgIGlmIChsYW5nPT09J2VsJyl7XHJcbiAgICAgICAgICBmZWF0dXJlLmFkZHJlc3MgPSBmLmdldCgnc3RyZWV0X2VsJykgKyAnICcgKyBmLmdldCgnaF9udW1fZWwnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmZWF0dXJlLmFkZHJlc3MgPSBmLmdldCgnc3RyZWV0X2VuJykgKyAnICcgKyBmLmdldCgnaF9udW1fZW4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZlYXR1cmUuYmVkcm9vbXMgPSBmLmdldCgnYmVkcm9vbXMnKTtcclxuICAgICAgICAgIGZlYXR1cmUucHJpY2UgPSBmLmdldCgncHJpY2UnKTtcclxuICAgICAgICAgIGZlYXR1cmUuZnVybmlzaGVkICA9IGYuZ2V0KCdmdXJuaXNoZWQnKTtcclxuICAgICAgICAgIGZlYXR1cmUucGV0cyAgPSBmLmdldCgncGV0cycpO1xyXG4gICAgICAgICAgZmVhdHVyZS5uZXcgID0gZi5nZXQoJ25ldycpO1xyXG4gICAgICAgICAgZmVhdHVyZXMucHVzaCh7XHJcbiAgICAgICAgICAgIGZlYXR1cmU6IGZlYXR1cmVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZmVhdHVyZUNvb3JkaW5hdGUgPSBmLmdldCgnZ2VvbWV0cnknKS5nZXRDb29yZGluYXRlcygpO1xyXG4gICAgICAgICAgb2JqLmZlYXR1cmVzID0gZmVhdHVyZXM7XHJcbiAgICAgICAgICB2YXIgUFNBU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbnM6IFtuZXcgb2wuQXR0cmlidXRpb24oe1xyXG4gICAgICAgICAgICAgIGh0bWw6ICdQT0kgYnkgJyArICc8YSBocmVmPVwiaHR0cDovL3d3dy50ZXJyYWNvZ25pdGEuZ3IvXCI+VGVycmEgQ29nbml0YTwvYT4nXHJcbiAgICAgICAgICAgIH0pXSxcclxuICAgICAgICAgICAgZm9ybWF0OiBnZW9KU09ORm9ybWF0LFxyXG4gICAgICAgICAgICBsb2FkZXI6IGZ1bmN0aW9uKGV4dGVudCwgcmVzb2x1dGlvbiwgcHJvamVjdGlvbikge1xyXG4gICAgICAgICAgICAgIHZhciB1cmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2RiL3VzZXMvJyArIGZlYXR1cmUuZ2lkO1xyXG4gICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gZ2VvSlNPTkZvcm1hdC5yZWFkRmVhdHVyZXMocmVzcG9uc2UucHJvcGVydHlfc2VydmljZXNfYW5hbHlzaXMsIHtcclxuICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246ICdFUFNHOjM4NTcnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBhcmVhID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBbMTU2LCAzOSwgMTc2LCAwLjFdXHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGZlYXR1cmVzWzBdLnNldFN0eWxlKGFyZWEpO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XHJcbiAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cmF0ZWd5OiBvbC5sb2FkaW5nc3RyYXRlZ3kuYWxsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIFBTQS5zZXRTb3VyY2UoUFNBU291cmNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBkdXN0LnJlbmRlcignZXN0YXRlSW5mby5kdXN0Jywgb2JqLCBmdW5jdGlvbihlcnIsIG91dCkge1xyXG4gICAgICAgICAgJChcIiNwb3B1cC1jb250ZW50XCIpLmh0bWwob3V0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBkdXN0LnJlbmRlcignZXN0YXRlQ2FyZHMuZHVzdCcsIG9iaiwgZnVuY3Rpb24oZXJyLCBvdXQpIHtcclxuICAgICAgICAgICQoJy5lc3RhdGUtY2FyZHMnKS5odG1sKG91dCk7XHJcbiAgICAgICAgICAkKCcuZXN0YXRlLWNhcmRzJykucmVtb3ZlQ2xhc3MoJ3Zpc3VhbGx5aGlkZGVuJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoZmVhdHVyZUNvb3JkaW5hdGUpO1xyXG4gICAgICAgIC8vIGluZm8uc2V0UG9zaXRpb24oZmVhdHVyZUNvb3JkaW5hdGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICQoJy5pbmZvJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICgkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICBtYXAub24oJ2NsaWNrJywgaGFuZGxlSW5mbyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtYXAudW4oJ2NsaWNrJywgaGFuZGxlSW5mbyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0oKSk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICB2YXIgbWFya2VyID0gbmV3IG9sLkZlYXR1cmUoKTtcclxuICB2YXIgaWNvblN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuSWNvbiggLyoqIEB0eXBlIHtvbHguc3R5bGUuSWNvbk9wdGlvbnN9ICovICh7XHJcbiAgICAgIGFuY2hvcjogWzAuNSwgMV0sXHJcbiAgICAgIGFuY2hvclhVbml0czogJ2ZyYWN0aW9uJyxcclxuICAgICAgYW5jaG9yWVVuaXRzOiAnZnJhY3Rpb24nLFxyXG4gICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICBzY2FsZTogMSxcclxuICAgICAgc3JjOiAnLi4vaW1hZ2VzL21hcC1pY29ucy9waW5zLzI0L3BpbjEucG5nJyxcclxuICAgICAgc25hcFRvUGl4ZWw6IGZhbHNlXHJcbiAgICB9KSksXHJcbiAgICB6SW5kZXg6IDEwMFxyXG4gIH0pO1xyXG4gIG1hcmtlci5zZXRTdHlsZShpY29uU3R5bGUpO1xyXG4gIHZhciBmZWF0dXJlc092ZXJsYXlTdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7XHJcbiAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xyXG4gICAgICBjb2xvcjogJyM0MDgwODAnLFxyXG4gICAgICB3aWR0aDogNSxcclxuICAgICAgbGluZURhc2g6IFs0LCA0XVxyXG4gICAgfSlcclxuICB9KTtcclxuICB2YXIgZmVhdHVyZXNPdmVybGF5ID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XHJcbiAgICBtYXA6IG1hcCxcclxuICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSxcclxuICAgIHN0eWxlOiBmZWF0dXJlc092ZXJsYXlTdHlsZSxcclxuICAgIGlkOiAncm91dGUnLFxyXG4gICAgbmFtZUVsOiAnzpTOuc6xzrTPgc6/zrzOricsXHJcbiAgICBOYW1lRW46ICdSb3V0ZSdcclxuICB9KTtcclxuICB2YXIgcm91dGVDb29yZHMgPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlTWFya2VyKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdmFyIGZlYXR1cmVDb3VudCA9IGZlYXR1cmVzT3ZlcmxheS5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpLmxlbmd0aDtcclxuICAgIHZhciBjb29yZGluYXRlcyA9IGV2ZW50LmNvb3JkaW5hdGU7XHJcbiAgICBpZiAoZmVhdHVyZUNvdW50ID09PSAwKSB7XHJcbiAgICAgIG1hcmtlci5zZXRHZW9tZXRyeShuZXcgb2wuZ2VvbS5Qb2ludChjb29yZGluYXRlcykpO1xyXG4gICAgICBtYXJrZXIuc2V0SWQoJ2ZpcnN0Jyk7XHJcbiAgICAgIGZlYXR1cmVzT3ZlcmxheS5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlKG1hcmtlcik7XHJcbiAgICAgIHJvdXRlQ29vcmRzWzBdID0gY29vcmRpbmF0ZXNbMF07XHJcbiAgICAgIHJvdXRlQ29vcmRzWzFdID0gY29vcmRpbmF0ZXNbMV07XHJcbiAgICB9IGVsc2UgaWYgKGZlYXR1cmVDb3VudCA9PT0gMSkge1xyXG4gICAgICB2YXIgY2xvbmUgPSBtYXJrZXIuY2xvbmUoKTtcclxuICAgICAgY2xvbmUuc2V0R2VvbWV0cnkobmV3IG9sLmdlb20uUG9pbnQoY29vcmRpbmF0ZXMpKTtcclxuICAgICAgY2xvbmUuc2V0SWQoJ3NlY29uZCcpO1xyXG4gICAgICBmZWF0dXJlc092ZXJsYXkuZ2V0U291cmNlKCkuYWRkRmVhdHVyZShjbG9uZSk7XHJcbiAgICAgIHJvdXRlQ29vcmRzWzJdID0gY29vcmRpbmF0ZXNbMF07XHJcbiAgICAgIHJvdXRlQ29vcmRzWzNdID0gY29vcmRpbmF0ZXNbMV07XHJcbiAgICAgIGNhbGxSb3V0ZShyb3V0ZUNvb3Jkcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmZWF0dXJlc092ZXJsYXkuZ2V0U291cmNlKCkuY2xlYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdlb0pTT05Gb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oe1xyXG4gICAgZGVmYXVsdERhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcclxuICAgIGdlb21ldHJ5TmFtZTogJ2dlb21ldHJ5J1xyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBjYWxsUm91dGUocm91dGVDb29yZHMpIHtcclxuICAgIHZhciBmaXJzdCA9IG9sLnByb2oudHJhbnNmb3JtKFtyb3V0ZUNvb3Jkc1swXSwgcm91dGVDb29yZHNbMV1dLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xyXG4gICAgdmFyIHNlY29uZCA9IG9sLnByb2oudHJhbnNmb3JtKFtyb3V0ZUNvb3Jkc1syXSwgcm91dGVDb29yZHNbM11dLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xyXG4gICAgdmFyIHgxID0gZmlyc3RbMF07XHJcbiAgICB2YXIgeTEgPSBmaXJzdFsxXTtcclxuICAgIHZhciB4MiA9IHNlY29uZFswXTtcclxuICAgIHZhciB5MiA9IHNlY29uZFsxXTtcclxuICAgICQuYWpheCh7XHJcbiAgICAgIHVybDogJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20vdjQvZGlyZWN0aW9ucy9tYXBib3guZHJpdmluZy8nICsgeDEgKyAnLCcgKyB5MSArICc7JyArIHgyICsgJywnICsgeTIgKyAnLmpzb24/YWx0ZXJuYXRpdmVzPWZhbHNlJmFjY2Vzc190b2tlbj1way5leUoxSWpvaVptbHlkbUZwYmlJc0ltRWlPaUpsT1dZeVlUTTBOVGhpTldNMFlqSmpPREpqTkRFNE9EUXpOekEyTUdReU5pSjkuLU5WRE8yN0h6dC13X25Rb3NVUGZMQScsXHJcbiAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICBkYXRhVHlwZTogJ2pzb24nXHJcbiAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgdmFyIHJvdXRlPXt9O1xyXG4gICAgICByb3V0ZS50eXBlID1cIkZlYXR1cmVcIjtcclxuICAgICAgcm91dGUuZ2VvbWV0cnkgPSBkYXRhLnJvdXRlc1swXS5nZW9tZXRyeTtcclxuICAgICAgZmVhdHVyZXNPdmVybGF5LmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGdlb0pTT05Gb3JtYXQucmVhZEZlYXR1cmVzKHJvdXRlLCB7XHJcbiAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxyXG4gICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiAnRVBTRzozODU3J1xyXG4gICAgICB9KSk7XHJcbiAgICAgIG1hcC5nZXRWaWV3KCkuZml0KGZlYXR1cmVzT3ZlcmxheS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSwgbWFwLmdldFNpemUoKSk7XHJcbiAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcImVycm9yXCIpO1xyXG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcImNvbXBsZXRlXCIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gICQoJy5tYXJrZXInKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAvKiBBY3Qgb24gdGhlIGV2ZW50ICovXHJcbiAgICBpZiAoJCh0aGlzKS5wcm9wKCdjaGVja2VkJykgPT09IHRydWUpIHtcclxuICAgICAgbWFwLm9uKCdzaW5nbGVjbGljaycsIGhhbmRsZU1hcmtlcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtYXAudW4oJ3NpbmdsZWNsaWNrJywgaGFuZGxlTWFya2VyKTtcclxuICAgICAgZmVhdHVyZXNPdmVybGF5LmdldFNvdXJjZSgpLmNsZWFyKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0oKSk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAkKCcud2VhdGhlcicpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgIGlmICgkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIG1hcC5nZXRPdmVybGF5cygpLmZvckVhY2goZnVuY3Rpb24ob3ZsKSB7XHJcbiAgICAgICAgaWYgKG92bC5nZXQoJ25hbWUnKSA9PT0gJ3dlYXRoZXInKSB7XHJcbiAgICAgICAgICAoJChvdmwuZ2V0RWxlbWVudCgpKS5wYXJlbnQoKSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAkKG92bC5nZXRFbGVtZW50KCkpLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHZhciBjZW50ZXIgPSBvbC5wcm9qLnRyYW5zZm9ybShtYXAuZ2V0VmlldygpLmdldENlbnRlcigpLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xyXG4gICAgICB2YXIgbGF0ID0gY2VudGVyWzFdO1xyXG4gICAgICB2YXIgbG9uID0gY2VudGVyWzBdO1xyXG4gICAgICAkLmFqYXgoe1xyXG4gICAgICAgIHVybDogJ2h0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L2ZpbmQ/bGF0PScgKyBsYXQgKyAnJmxvbj0nICsgbG9uICsgJyZjbnQ9NSZjbHVzdGVyPW5vJnVuaXRzPW1ldHJpYyZ0eXBlPWFjY3VyYXRlJkFQUElEPWY5Y2Q5ZmEyYzQyN2MzYjExNWU4N2U0ODYyNjE5YzVjJyxcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVXZWF0aGVyT3ZlcmxheShwb3NpdGlvbiwgaW5kZXgpIHtcclxuICAgICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnd2VhdGhlci1wb3B1cCBkZWZhdWx0LXByaW1hcnktY29sb3IgbWRsLXNoYWRvdy0tNmRwJyk7XHJcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnaWQnLCBpbmRleCk7XHJcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJywgJ3dlYXRoZXInKTtcclxuICAgICAgICAgIHJldHVybiBuZXcgb2wuT3ZlcmxheSh7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW0sXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JqcyA9IGRhdGEubGlzdDtcclxuICAgICAgICB2YXIgb3ZlcmxheSwgY29vcmRpbmF0ZXM7XHJcbiAgICAgICAgJC5lYWNoKG9ianMsIGZ1bmN0aW9uKGluZGV4LCB2YWwpIHtcclxuICAgICAgICAgIGNvb3JkaW5hdGVzID0gb2wucHJvai50cmFuc2Zvcm0oW3ZhbC5jb29yZC5sb24sIHZhbC5jb29yZC5sYXRdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpO1xyXG4gICAgICAgICAgb3ZlcmxheSA9IGNyZWF0ZVdlYXRoZXJPdmVybGF5KGNvb3JkaW5hdGVzLCBpbmRleCk7XHJcbiAgICAgICAgICBtYXAuYWRkT3ZlcmxheShvdmVybGF5KTtcclxuICAgICAgICAgIG92ZXJsYXkuc2V0KCduYW1lJywgJ3dlYXRoZXInKTtcclxuICAgICAgICAgIHdlYXRoZXJEYXRhID0ge1xyXG4gICAgICAgICAgICAnbmFtZSc6IHZhbC5uYW1lLFxyXG4gICAgICAgICAgICAndGVtcCc6IHZhbC5tYWluLnRlbXAsXHJcbiAgICAgICAgICAgICdwcmVzc3VyZSc6IHZhbC5tYWluLnByZXNzdXJlLFxyXG4gICAgICAgICAgICAnaHVtaWRpdHknOiB2YWwubWFpbi5odW1pZGl0eVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGR1c3QucmVuZGVyKCd3ZWF0aGVyUG9wdXAuZHVzdCcsIHdlYXRoZXJEYXRhLCBmdW5jdGlvbihlcnIsIG91dCkge1xyXG4gICAgICAgICAgICAkKFwiI1wiICsgaW5kZXgpLmh0bWwob3V0KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIHRvYXN0ci5lcnJvcihcIs6UzrXOvSDOss+Bzq3OuM63zrrOsc69IM+AzrvOt8+Bzr/Phs6/z4HOr861z4IgzrPOuc6xIM+EzrnPgiDOus6xzrnPgc65zrrOrc+CIM+Dz4XOvc64zq7Ous61z4IhXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoJCh0aGlzKS5wcm9wKCdjaGVja2VkJykgPT09IGZhbHNlKSB7XHJcbiAgICAgIG1hcC5nZXRPdmVybGF5cygpLmZvckVhY2goZnVuY3Rpb24ob3ZsKSB7XHJcbiAgICAgICAgaWYgKG92bC5nZXQoJ25hbWUnKSA9PT0gJ3dlYXRoZXInKSB7XHJcbiAgICAgICAgICAoJChvdmwuZ2V0RWxlbWVudCgpKS5wYXJlbnQoKSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAkKG92bC5nZXRFbGVtZW50KCkpLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0oKSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==