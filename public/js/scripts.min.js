 var center = [3677385, 4120949],
   extent = [3590094, 4102833, 3855483, 4261211],
   lang = document.documentElement.lang,
   styleCache = {},
   geoJSONFormat = new ol.format.GeoJSON({
     defaultDataProjection: 'EPSG:4326'
   });
 var bing = new ol.layer.Tile({
   visible: true,
   source: new ol.source.BingMaps({
     key: 'Ak2Gq8VUfICsPpuf7LRANXmXt2sHWmSLPhohmVLFtFIEwYjs_5MCyAhAFwRSVpLj',
     imagerySet: 'Aerial'
   }),
   maxZoom: 19,
   crossOrigin: 'anonymous',
   preload: Infinity,
   id: 'bing'
 });
 var mapbox = new ol.layer.Tile({
   source: new ol.source.XYZ({
     attributions: [new ol.Attribution({
       html: '<a href=\"https://www.mapbox.com/about/maps/\" target=\"_blank\">&copy; Mapbox &copy; OpenStreetMap</a>'
     })],
     url: 'https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA'
   }),
   id: 'mapbox'
 });

 function createPropertyStyle(feature) {
   var src;
   if (feature.get('type_en') === 'Sale') {
     src = '../images/map-icons/pins/48/pin2.png';
   } else {
     src = '../images/map-icons/pins/48/pin5.png';
   }
   return new ol.style.Style({
     geometry: feature.getGeometry(),
     image: new ol.style.Icon(({
       src: src,
       anchorOrigin: 'bottom-left',
       anchor: [0, 0],
       scale: 0.7,
     }))
   });
 }

 function propertyStyleFunction(feature, resolution) {
   var size = feature.get('features').length;
   if (size > 1) {
     style = [new ol.style.Style({
       image: new ol.style.Circle({
         radius: 20,
         stroke: new ol.style.Stroke({
           color: [156, 39, 176, 1],
           width: 5
         }),
         fill: new ol.style.Fill({
           color: [68, 138, 255, 0.8]
         })
       }),
       text: new ol.style.Text({
         text: size.toString(),
         fill: new ol.style.Fill({
           color: '#FFFFFF'
         })
       }),
       zIndex: 101
     })];
   } else {
     var originalFeature = feature.get('features')[0];
     style = [createPropertyStyle(originalFeature)];
   }
   return style;
 }

 function selectStyleFunction(feature, resolution) {
   var styles = [new ol.style.Style({})];
   var originalFeatures = feature.get('features');
   var originaFeature;
   for (var i = originalFeatures.length - 1; i >= 0; --i) {
     originalFeature = originalFeatures[i];
     styles.push(createPropertyStyle(originalFeature));
   }
   return styles;
 }
 var propertySource = new ol.source.Vector({
   format: geoJSONFormat,
   loader: function(extent, resolution, projection) {
     var epsg4326Extent = ol.proj.transformExtent(extent, 'EPSG:3857', 'EPSG:4326');
     var url = 'http://localhost:3000/db/property?bbox[x1]=' + epsg4326Extent[0] + '&bbox[y1]=' + epsg4326Extent[1] + '&bbox[x2]=' + epsg4326Extent[2] + '&bbox[y2]=' + epsg4326Extent[3];
     var that = this;
     this.clear();
     $.ajax({
       url: url,
       type: 'GET',
       dataType: 'json',
     }).done(function(response) {
       var features = geoJSONFormat.readFeatures(response, {
         featureProjection: 'EPSG:3857'
       });
       that.addFeatures(features);
     }).fail(function() {
       console.log("error");
     });
   },
   strategy: ol.loadingstrategy.bbox
 });
 var propertyClusterSource = new ol.source.Cluster({
   distance: 40,
   source: propertySource,
   attributions: [new ol.Attribution({
     html: 'All maps © ' + '<a href="http://www.terracognita.gr/">Terra Cognita</a>'
   })]
 });
 var property = new ol.layer.Vector({
   source: propertyClusterSource,
   id: 'estates',
   visible: true,
   style: propertyStyleFunction
 });
 property.setZIndex(2);
 var PSAStyleFunction = function(feature, resolution) {
   var symbol = feature.get('style');
   var text;
   if (lang === 'el') {
     text = feature.get('name_el');
   } else {
     text = feature.get('name_en');
   }
   if (!styleCache[symbol]) {
     styleCache = [new ol.style.Style({
       image: new ol.style.Icon(({
         src: '../images/maki/renders/' + symbol + '-24.png',
         anchorOrigin: 'bottom-left',
         anchor: [0.5, 0.5],
         scale: 1,
       })),
       text: new ol.style.Text({
         text: text,
         stroke: new ol.style.Stroke({
           color: [156, 39, 176, 0.8],
           width: 1
         }),
         offsetY: 12
       })
     })];
   }
   return styleCache;
 };
 var PSA = new ol.layer.Vector({
   style: PSAStyleFunction,
   maxResolution: 3
 });
 PSA.setZIndex(1);

 function filteredEsateStyle(feature, resolution) {
   styleCache = [new ol.style.Style({
     image: new ol.style.Icon(({
       src: '../images/map-icons/pins/48/pin4.png',
       anchorOrigin: 'bottom-left',
       anchor: [0.5, 0.5],
       scale: 0.7,
     }))
   })];
   return styleCache;
 }
 var filteredEstates = new ol.layer.Vector({
   source: new ol.source.Vector({
     format: geoJSONFormat
   }),
   id: 'filteredEstates',
   visible: true,
   style: filteredEsateStyle
 });
 filteredEstates.setZIndex(2);
 var selectSource = new ol.source.Vector({});

var selectBox = new ol.layer.Vector({
  source: selectSource,
  style: new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(227, 72, 27, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: '#E3481B',
      width: 2
    }),
    image: new ol.style.Circle({
      radius: 7,
      fill: new ol.style.Fill({
        color: '#E3481B'
      })
    })
  })
});
selectBox.setZIndex(3);
 var map = new ol.Map({
   target: 'map',
   layers: [mapbox, property, PSA, filteredEstates,selectBox],
   // interactions: ol.interaction.defaults().extend([new ol.interaction.Select({
   //   condition: function(evt) {
   //     return evt.type === 'singleclick' && ol.events.condition.shiftKeyOnly(evt);
   //   },
   //   style: selectStyleFunction
   // })]),
   loadTilesWhileAnimating: true,
   loadTilesWhileInteracting: true,
   renderer: 'canvas',
   controls: ol.control.defaults({
     attributionOptions: {
       collapsible: false,
       collapsed: false
     }
   }).extend([
     new ol.control.ScaleLine({
       units: 'metric'
     }), new ol.control.OverviewMap({
       className: 'ol-overviewmap ol-custom-overviewmap',
       collapsible: true,
       collapsed: true,
       layers: [bing]
     }),
     new ol.control.ZoomToExtent({
       extent: extent
     })
   ]),
   view: new ol.View({
     center: center,
     extent: extent,
     projection: 'EPSG:3857',
     zoom: 14,
     maxZoom: 19,
     minZoom: 10
   }),
 });
 if (lang === 'el') {
   bing.set('name', 'Δορυφορική εικόνα');
   mapbox.set('name', 'Χάρτης');
   property.set('name', 'Ακίνητα');
 } else {
   bing.set('name', 'Sattelite Image');
   mapbox.set('name', 'Map');
   property.set('name', 'Properties');
 }

 function selectByFilters() {
   PSA.setSource(null);
   var params = {};
   var epsg4326Extent;
   params.leaseType = $("input[name=options]:checked").val();
   params.startPrice = $('#startPrice').val();
   params.endPrice = $('#endPrice').val();
   params.parking = $('#checkbox-1').prop('checked');
   params.furnished = $('#checkbox-2').prop('checked');
   params.heating = $('#checkbox-3').prop('checked');
   params.cooling = $('#checkbox-4').prop('checked');
   params.view = $('#checkbox-5').prop('checked');
   if (selectSource.getFeatures().length === 0) {
     epsg4326Extent = ol.proj.transformExtent(extent, 'EPSG:3857', 'EPSG:4326');
   } else {
     epsg4326Extent = ol.proj.transformExtent(selectSource.getFeatures()[0].getGeometry().getExtent(), 'EPSG:3857', 'EPSG:4326');
   }
   toastr.options = {
     "closeButton": false,
     "debug": false,
     "newestOnTop": false,
     "progressBar": false,
     "positionClass": "toast-top-center",
     "preventDuplicates": false,
     "onclick": null,
     "showDuration": "300",
     "hideDuration": "1000",
     "timeOut": "5000",
     "extendedTimeOut": "1000",
     "showEasing": "swing",
     "hideEasing": "linear",
     "showMethod": "fadeIn",
     "hideMethod": "fadeOut"
   };
   $.ajax({
     url: 'http://localhost:3000/db/filteredproperty?bbox[x1]=' + epsg4326Extent[0] + '&bbox[y1]=' + epsg4326Extent[1] + '&bbox[x2]=' + epsg4326Extent[2] + '&bbox[y2]=' + epsg4326Extent[3],
     type: 'GET',
     dataType: 'json',
     data: {
       leaseType: params.leaseType,
       furnished: params.furnished,
       heating: params.heating,
       parking: params.parking,
       cooling: params.cooling,
       view: params.view,
       startPrice: params.startPrice,
       endPrice: params.endPrice
     },
   }).done(function(response) {
     var features = geoJSONFormat.readFeatures(response, {
       featureProjection: 'EPSG:3857'
     });

     if (features.length > 0) {
       toastr.clear();
       filteredEstates.getSource().clear();
       filteredEstates.getSource().addFeatures(features);
       filteredEstates.setVisible(true);
       property.setVisible(false);
       var extent = filteredEstates.getSource().getExtent();
       var center = [];
     } else {
       toastr.error("No Info Found!");
       filteredEstates.setVisible(false);
       property.setVisible(true);
     }
   });
 }
 $("#clearFilters").click(function() {
   $("input[name=options]").prop('checked', false);
   $('label[for=option-1]').removeClass('is-checked');
   $('label[for=option-2]').removeClass('is-checked');
   $('label[for=checkbox-1]').removeClass('is-checked');
   $('label[for=checkbox-2]').removeClass('is-checked');
   $('label[for=checkbox-3]').removeClass('is-checked');
   $('label[for=checkbox-4]').removeClass('is-checked');
   $('label[for=checkbox-5]').removeClass('is-checked');
   $('label[for=checkbox-6]').removeClass('is-checked');
   filteredEstates.getSource().clear();
   property.setVisible(true);
   PSA.setSource(null);
   selectSource.clear();
   map.removeInteraction(draw);
 });
 var draw;

 function addInteraction() {
   selectSource.clear();
   draw = new ol.interaction.Draw({
     source: selectSource,
     type: 'LineString',
     geometryFunction: geometryFunction,
     maxPoints: 2
   });
   draw.on('drawstart', function() {
     selectSource.clear();
   });
   map.addInteraction(draw);
 }

 function geometryFunction(coordinates, geometry) {
   if (!geometry) {
     geometry = new ol.geom.Polygon(null);
   }
   var start = coordinates[0];
   var end = coordinates[1];
   geometry.setCoordinates([
     [start, [start[0], end[1]], end, [end[0], start[1]], start]
   ]);
   return geometry;
 }
 $("#checkbox-6").change(function() {
   if (this.checked) {
     addInteraction();
   } else {
     map.removeInteraction(draw);
     selectSource.clear();
   }
 });

(function() {
  var geolocation = new ol.Geolocation({
    // take the projection to use from the map's view
    projection: map.getView().getProjection(),
    trackingOptions: {
      maximumAge: 10000,
      enableHighAccuracy: true,
      timeout: 600000
    }
  });
  var accuracyFeature = new ol.Feature();
  geolocation.on('change:accuracyGeometry', function() {
    accuracyFeature.setGeometry(geolocation.getAccuracyGeometry());
  });
  var positionFeature = new ol.Feature();
  positionFeature.setStyle(new ol.style.Style({
    image: new ol.style.Circle({
      radius: 6,
      fill: new ol.style.Fill({
        color: '#3399CC'
      }),
      stroke: new ol.style.Stroke({
        color: '#fff',
        width: 2
      })
    })
  }));
  // listen to changes in position
  geolocation.on('change:position', function() {
    var coordinates = geolocation.getPosition();
    positionFeature.setGeometry(coordinates ? new ol.geom.Point(coordinates) : null);
  });
  featuresOverlaySource = new ol.source.Vector({});
  var featuresOverlay = new ol.layer.Vector({
    map: map,
    source: featuresOverlaySource
  });
  $('.geolocation').on('change', function(e) {
    e.preventDefault();
    if ($(this).prop('checked') === true) {
      geolocation.setTracking(true);
      featuresOverlaySource.addFeatures([positionFeature,accuracyFeature]);
    } else {
      geolocation.setTracking(false);
      featuresOverlaySource.clear();
    }
  });
}());

function handleInfo(evt) {
  evt.preventDefault();
  map.removeInteraction(draw);
  var coordinate = evt.coordinate;
  var obj = {};
  var title = {};
  var owner = {};
  var features = [];
  obj.title = title;
  if (lang === 'el') {
    title.estateCode = 'Κωδικός Ιδιοκτησίας';
    title.type = 'Τύπος';
    title.area = 'Εμβαδό';
    title.address = 'Διευθυνση';
    title.bedrooms = 'Υπνοδωμάτια';
    title.price = 'Τιμή';
    title.new = 'Νεόδμητο';
    title.parking = 'Στάθμεση';
    title.furnished = 'Επιπλωμένο';
    title.pets = 'Κατοικίδια';
    title.view = 'Θέα';
    title.heating = 'Θέρμανση';
    title.cooling = 'Ψύξη';
    title.contactInfo = 'Στοιχεία Επικοινωνίας';
    title.name = 'Όνομα';
    title.lastname = 'Επίθετο';
    title.phone = 'Τηλέφωνο';
    title.email = 'Ηλεκτρονική Διεύθυνση';
  } else {
    title.estateCode = 'Estate Code';
    title.type = 'Type';
    title.area = 'Size';
    title.address = 'Address';
    title.bedrooms = 'Bedrooms';
    title.price = 'Price';
    title.new = 'Newly Build';
    title.parking = 'Parking';
    title.furnished = 'Furnished';
    title.pets = 'Pets Allowed';
    title.view = 'View';
    title.heating = 'Heating';
    title.cooling = 'Cooling';
    title.contactInfo = 'Contact Info';
    title.name = 'Name';
    title.lastname = 'Last Name';
    title.phone = 'Telephone';
    title.email = 'Email';
  }
  clickedFeature = map.forEachFeatureAtPixel(evt.pixel, function(feature, layer) {
    return {
      feature: feature,
      layer: layer
    };
  }, this, function(layer) {
    if (layer.get('id') === 'estates' || layer.get('id') === 'filteredEstates') {
      return true;
    }
  }, this);
  var f;
  if (clickedFeature) {
    if (clickedFeature.layer.get('id') === 'estates' && clickedFeature.feature.get('features').length === 1) {
      f = clickedFeature.feature.getProperties().features[0];
      createPSAandCard(f, obj);
    } else if (clickedFeature.layer.get('id') === 'filteredEstates') {
      f = clickedFeature.feature;
      createPSAandCard(f, obj);
    }
  } else {
    PSA.setSource(null);
  }
}

function createPSAandCard(f, obj) {
  var feature = {};
  feature.gid = f.get('gid');
  feature.type = f.get('estatetype');
  feature.area = f.get('estatearea');
  if (lang === 'el') {
    feature.address = f.get('street_el') + ' ' + f.get('h_num_el');
  } else {
    feature.address = f.get('street_en') + ' ' + f.get('h_num_en');
  }
  feature.bedrooms = f.get('bedrooms');
  feature.price = f.get('price');
  feature.new = f.get('new');
  feature.parking = f.get('parking');
  feature.furnished = f.get('furnished');
  feature.pets = f.get('pets');
  feature.view = f.get('view');
  feature.heating = f.get('heating');
  feature.cooling = f.get('cooling');
  if (lang === 'el') {
    feature.name = f.get('name_el');
    feature.lastname = f.get('lastname_el');
  } else {
    feature.name = f.get('name_en');
    feature.lastname = f.get('lastname_en');
  }
  feature.phone = f.get('phone1');
  feature.email = f.get('email');
  feature.coordinate = f.get('geometry').getCoordinates();
  var PSASource = new ol.source.Vector({
    attributions: [new ol.Attribution({
      html: 'POI by ' + '<a href="http://www.terracognita.gr/">Terra Cognita</a>'
    })],
    format: geoJSONFormat,
    loader: function(extent, resolution, projection) {
      var url = 'http://localhost:3000/db/uses/' + feature.gid;
      var that = this;
      $.ajax({
        url: url,
        type: 'GET',
        dataType: 'json',
      }).done(function(response) {
        var features = geoJSONFormat.readFeatures(response.property_services_analysis, {
          featureProjection: 'EPSG:3857'
        });
        var area = new ol.style.Style({
          fill: new ol.style.Fill({
            color: [156, 39, 176, 0.1]
          })
        });
        features[0].setStyle(area);
        that.addFeatures(features);
      }).fail(function() {
        console.log("error");
      });
    },
    strategy: ol.loadingstrategy.all
  });
  PSA.setSource(PSASource);
  map.getView().setCenter(feature.coordinate);
  map.getView().setResolution(1.2);
  obj.feature = feature;
  dust.render('estateCards.dust', obj, function(err, out) {
    $('.estate-cards').html(out);
    $('.estate-cards').removeClass('visuallyhidden');
  });
  $('a[href="#openModal"]').click(function() {
    dust.render('modalInfo.dust', obj, function(err, out) {
      $('.modal-content').html(out);
    });
  });
}
$('.info').on('change', function(e) {
  e.preventDefault();
  PSA.setSource(null);
    
  if ($(this).prop('checked') === true) {
    map.on('click', handleInfo);
  } else {
    map.un('click', handleInfo);
  }
});

(function() {
  var marker = new ol.Feature();
  var iconStyle = new ol.style.Style({
    image: new ol.style.Icon( /** @type {olx.style.IconOptions} */ ({
      anchor: [0.5, 1],
      anchorXUnits: 'fraction',
      anchorYUnits: 'fraction',
      opacity: 1,
      scale: 1,
      src: '../images/map-icons/pins/24/pin1.png',
      snapToPixel: false
    })),
    zIndex: 100
  });
  marker.setStyle(iconStyle);
  var featuresOverlayStyle = new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: '#408080',
      width: 5,
      lineDash: [4, 4]
    })
  });
  var featuresOverlay = new ol.layer.Vector({
    map: map,
    source: new ol.source.Vector(),
    style: featuresOverlayStyle,
    id: 'route',
    nameEl: 'Διαδρομή',
    NameEn: 'Route'
  });
  var routeCoords = [];

  function handleMarker(event) {
    event.preventDefault();
    var featureCount = featuresOverlay.getSource().getFeatures().length;
    var coordinates = event.coordinate;
    if (featureCount === 0) {
      marker.setGeometry(new ol.geom.Point(coordinates));
      marker.setId('first');
      featuresOverlay.getSource().addFeature(marker);
      routeCoords[0] = coordinates[0];
      routeCoords[1] = coordinates[1];
    } else if (featureCount === 1) {
      var clone = marker.clone();
      clone.setGeometry(new ol.geom.Point(coordinates));
      clone.setId('second');
      featuresOverlay.getSource().addFeature(clone);
      routeCoords[2] = coordinates[0];
      routeCoords[3] = coordinates[1];
      callRoute(routeCoords);
    } else {
      featuresOverlay.getSource().clear();
    }
  }

  geoJSONFormat = new ol.format.GeoJSON({
    defaultDataProjection: 'EPSG:4326',
    geometryName: 'geometry'
  });

  function callRoute(routeCoords) {
    var first = ol.proj.transform([routeCoords[0], routeCoords[1]], 'EPSG:3857', 'EPSG:4326');
    var second = ol.proj.transform([routeCoords[2], routeCoords[3]], 'EPSG:3857', 'EPSG:4326');
    var x1 = first[0];
    var y1 = first[1];
    var x2 = second[0];
    var y2 = second[1];
    $.ajax({
      url: 'https://api.mapbox.com/v4/directions/mapbox.driving/' + x1 + ',' + y1 + ';' + x2 + ',' + y2 + '.json?alternatives=false&access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA',
      type: 'GET',
      dataType: 'json'
    }).done(function(data) {
      var route={};
      route.type ="Feature";
      route.geometry = data.routes[0].geometry;
      featuresOverlay.getSource().addFeatures(geoJSONFormat.readFeatures(route, {
        dataProjection: 'EPSG:4326',
        featureProjection: 'EPSG:3857'
      }));
      map.getView().fit(featuresOverlay.getSource().getExtent(), map.getSize());
    }).fail(function() {
      console.log("error");
    }).always(function() {
      console.log("complete");
    });
  }
  $('.marker').on('change', function(event) {
    event.preventDefault();
    /* Act on the event */
    if ($(this).prop('checked') === true) {
      map.on('singleclick', handleMarker);
    } else {
      map.un('singleclick', handleMarker);
      featuresOverlay.getSource().clear();
    }
  });
}());

(function() {
  $('.weather').change(function() {
    if ($(this).prop('checked') === true) {
        map.getOverlays().forEach(function(ovl) {
        if (ovl.get('name') === 'weather') {
          ($(ovl.getElement()).parent()).remove();
          $(ovl.getElement()).remove();
        }
      });
      var center = ol.proj.transform(map.getView().getCenter(), 'EPSG:3857', 'EPSG:4326');
      var lat = center[1];
      var lon = center[0];
      $.ajax({
        url: 'http://api.openweathermap.org/data/2.5/find?lat=' + lat + '&lon=' + lon + '&cnt=5&cluster=no&units=metric&type=accurate&APPID=f9cd9fa2c427c3b115e87e4862619c5c',
        type: 'GET',
        dataType: 'json',
      }).done(function(data) {
        function createWeatherOverlay(position, index) {
          var elem = document.createElement('div');
          elem.setAttribute('class', 'weather-popup default-primary-color mdl-shadow--6dp');
          elem.setAttribute('id', index);
          elem.setAttribute('data-name', 'weather');
          return new ol.Overlay({
            element: elem,
            position: position,
          });
        }
        var objs = data.list;
        var overlay, coordinates;
        $.each(objs, function(index, val) {
          coordinates = ol.proj.transform([val.coord.lon, val.coord.lat], 'EPSG:4326', 'EPSG:3857');
          overlay = createWeatherOverlay(coordinates, index);
          map.addOverlay(overlay);
          overlay.set('name', 'weather');
          weatherData = {
            'name': val.name,
            'temp': val.main.temp,
            'pressure': val.main.pressure,
            'humidity': val.main.humidity
          };
          dust.render('weatherPopup.dust', weatherData, function(err, out) {
            $("#" + index).html(out);
          });
        });
      }).fail(function() {
        // toastr.error("Δεν βρέθηκαν πληροφορίες για τις καιρικές συνθήκες!");
      });
    } else if ($(this).prop('checked') === false) {
      map.getOverlays().forEach(function(ovl) {
        if (ovl.get('name') === 'weather') {
          ($(ovl.getElement()).parent()).remove();
          $(ovl.getElement()).remove();
        }
      });
    }
  });
}());

//# sourceMappingURL=data:application/json;base64,
