var geoJSONFormat=new ol.format.GeoJSON({defaultDataProjection:"EPSG:4326"}),styleCache={},bing=new ol.layer.Tile({visible:!0,source:new ol.source.BingMaps({key:"Ak2Gq8VUfICsPpuf7LRANXmXt2sHWmSLPhohmVLFtFIEwYjs_5MCyAhAFwRSVpLj",imagerySet:"Aerial"}),maxZoom:19,crossOrigin:"anonymous",preload:1/0,nameEl:"Δορυφορική εικόνα",nameEn:"Satellite Image",id:"bing"}),mapbox=new ol.layer.Tile({source:new ol.source.XYZ({attributions:new ol.Attribution({html:'<a href="https://www.mapbox.com/about/maps/" target="_blank">&copy; Mapbox &copy; OpenStreetMap</a>'}),url:"https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA"})}),propertyStyleFunction=function(e,o){var t=e.get("features").length,r=styleCache[t];return r||(r=[new ol.style.Style({image:new ol.style.Circle({radius:15,stroke:new ol.style.Stroke({color:[156,39,176,.8],width:5}),fill:new ol.style.Fill({color:[68,138,255,1]})}),text:new ol.style.Text({text:t.toString(),fill:new ol.style.Fill({color:"#FFFFFF"})}),zIndex:101})],styleCache[t]=r),r},propertySource=new ol.source.Vector({format:geoJSONFormat,loader:function(e,o,t){var r=ol.proj.transformExtent(e,"EPSG:3857","EPSG:4326"),l="http://www.geomerchant.eu:3000/db/property?bbox[x1]="+r[0]+"&bbox[y1]="+r[1]+"&bbox[x2]="+r[2]+"&bbox[y2]="+r[3],a=this;this.clear(),$.ajax({url:l,type:"GET",dataType:"json"}).done(function(e){var o=geoJSONFormat.readFeatures(e,{featureProjection:"EPSG:3857"});a.addFeatures(o)}).fail(function(){console.log("error")})},strategy:ol.loadingstrategy.bbox}),propertyClusterSource=new ol.source.Cluster({distance:40,source:propertySource,attributions:[new ol.Attribution({html:'All maps © <a href="http://www.terracognita.gr/">Terra Cognita</a>'})]}),property=new ol.layer.Vector({source:propertyClusterSource,nameEl:"Ιδιοκτησίες",nameEn:"Estates",id:"estates",visible:!0,style:propertyStyleFunction}),map=new ol.Map({target:"map",layers:[mapbox,property],loadTilesWhileAnimating:!0,loadTilesWhileInteracting:!0,renderer:"canvas",controls:ol.control.defaults({attributionOptions:{collapsible:!1,collapsed:!1}}).extend([new ol.control.ScaleLine({units:"metric"}),new ol.control.OverviewMap({className:"ol-overviewmap ol-custom-overviewmap",collapsible:!0,collapsed:!0,layers:[new ol.layer.Tile({source:new ol.source.OSM,visible:!0,preload:1/0,crossOrigin:"anonymous",nameEl:"Μικρός Χάρτης",nameEn:"MiniMap",id:"overviewOsm"})]})]),view:new ol.View({center:[3713616,4181258],extent:[3590094,4102833,3855483,4261211],projection:"EPSG:3857",zoom:14,maxZoom:19,minZoom:10})});
!function(){var e=new ol.Geolocation({projection:map.getView().getProjection(),trackingOptions:{maximumAge:1e4,enableHighAccuracy:!0,timeout:6e5}}),o=new ol.Feature;e.on("change:accuracyGeometry",function(){o.setGeometry(e.getAccuracyGeometry())});var t=new ol.Feature;t.setStyle(new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"#3399CC"}),stroke:new ol.style.Stroke({color:"#fff",width:2})})})),e.on("change:position",function(){var o=e.getPosition();t.setGeometry(o?new ol.geom.Point(o):null)}),featuresOverlaySource=new ol.source.Vector({});new ol.layer.Vector({map:map,source:featuresOverlaySource});$(".geolocation").on("change",function(r){r.preventDefault(),$(this).prop("checked")===!0?(e.setTracking(!0),featuresOverlaySource.addFeatures([t,o])):(e.setTracking(!1),featuresOverlaySource.clear())})}();
!function(){function e(e){e.preventDefault();var t=e.coordinate,a={},r={},u=[];"el"===document.documentElement.lang?(r.type="Τύπος",r.area="Εμβαδό",r.address="Διευθυνση"):(r.type="Type",r.area="Size",r.address="Address"),a.title=r,clickedFeature=map.forEachFeatureAtPixel(e.pixel,function(e,t){return{feature:e,layer:t}},this,function(e){return"estates"===e.get("id")?!0:void 0},this),clickedFeature&&(clickedFeature.feature.get("features").forEach(function(e){var t={};e.get("gid");t.type=e.get("estatetype"),t.area=e.get("estatearea"),t.address=e.get("street")+" "+e.get("h_num"),u.push({feature:t}),a.features=u}),dust.render("estateInfo.dust",a,function(e,t){$("#popup-content").html(t)}),dust.render("estateCards.dust",a,function(e,t){$(".estate-cards").html(t),$(".estate-cards").removeClass("hidden")}),n.setPosition(t))}var t=document.getElementById("popup"),a=document.getElementById("popup-closer");a.onclick=function(){return n.setPosition(void 0),a.blur(),!1};var n=new ol.Overlay({element:t,autoPan:!0,autoPanAnimation:{duration:250}});map.addOverlay(n),$(".info").on("change",function(t){t.preventDefault(),$(this).prop("checked")===!0?map.on("singleclick",e):map.un("singleclick",e)})}();
!function(){function e(e){e.preventDefault();var r=n.getSource().getFeatures().length,a=e.coordinate;if(0===r)t.setGeometry(new ol.geom.Point(a)),t.setId("first"),n.getSource().addFeature(t),c[0]=a[0],c[1]=a[1];else if(1===r){var i=t.clone();i.setGeometry(new ol.geom.Point(a)),i.setId("second"),n.getSource().addFeature(i),c[2]=a[0],c[3]=a[1],o(c)}else n.getSource().clear()}function o(e){var o=ol.proj.transform([e[0],e[1]],"EPSG:3857","EPSG:4326"),t=ol.proj.transform([e[2],e[3]],"EPSG:3857","EPSG:4326"),r=o[0],a=o[1],c=t[0],i=t[1];$.ajax({url:"https://api.mapbox.com/v4/directions/mapbox.driving/"+r+","+a+";"+c+","+i+".json?alternatives=false&access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA",type:"GET",dataType:"json"}).done(function(e){var o={};o.type="Feature",o.geometry=e.routes[0].geometry,n.getSource().addFeatures(geoJSONFormat.readFeatures(o,{dataProjection:"EPSG:4326",featureProjection:"EPSG:3857"})),map.getView().fit(n.getSource().getExtent(),map.getSize())}).fail(function(){console.log("error")}).always(function(){console.log("complete")})}var t=new ol.Feature,r=new ol.style.Style({image:new ol.style.Icon({anchor:[.5,1],anchorXUnits:"fraction",anchorYUnits:"fraction",opacity:1,scale:1,src:"../images/map-icons/pins/24/pin1.png",snapToPixel:!1}),zIndex:100});t.setStyle(r);var a=new ol.style.Style({stroke:new ol.style.Stroke({color:"#408080",width:5,lineDash:[4,4]})}),n=new ol.layer.Vector({map:map,source:new ol.source.Vector,style:a,id:"route",nameEl:"Διαδρομή",NameEn:"Route"}),c=[];geoJSONFormat=new ol.format.GeoJSON({defaultDataProjection:"EPSG:4326",geometryName:"geometry"}),$(".marker").on("change",function(o){o.preventDefault(),$(this).prop("checked")===!0?map.on("singleclick",e):(map.un("singleclick",e),n.getSource().clear())})}();
!function(){$(".weather").change(function(){if($(this).prop("checked")===!0){map.getOverlays().forEach(function(e){"weather"===e.get("name")&&($(e.getElement()).parent().remove(),$(e.getElement()).remove())});var e=ol.proj.transform(map.getView().getCenter(),"EPSG:3857","EPSG:4326"),t=e[1],a=e[0];$.ajax({url:"http://api.openweathermap.org/data/2.5/find?lat="+t+"&lon="+a+"&cnt=5&cluster=no&units=metric&type=accurate&APPID=f9cd9fa2c427c3b115e87e4862619c5c",type:"GET",dataType:"json"}).done(function(e){function t(e,t){var a=document.createElement("div");return a.setAttribute("class","weather-popup default-primary-color mdl-shadow--6dp"),a.setAttribute("id",t),a.setAttribute("data-name","weather"),new ol.Overlay({element:a,position:e})}var a,r,n=e.list;$.each(n,function(e,n){r=ol.proj.transform([n.coord.lon,n.coord.lat],"EPSG:4326","EPSG:3857"),a=t(r,e),map.addOverlay(a),a.set("name","weather"),weatherData={name:n.name,temp:n.main.temp,pressure:n.main.pressure,humidity:n.main.humidity},dust.render("weatherPopup.dust",weatherData,function(t,a){$("#"+e).html(a)})})}).fail(function(){})}else $(this).prop("checked")===!1&&map.getOverlays().forEach(function(e){"weather"===e.get("name")&&($(e.getElement()).parent().remove(),$(e.getElement()).remove())})})}();
//# sourceMappingURL=data:application/json;base64,