var $loading = $('.mdl-spinner');
var center = [3677385, 4120949];
var extent = [3652772, 4112808, 3700000, 4132797];
var lang = document.documentElement.lang;
var styleCache = {};
var geoJSONFormat = new ol.format.GeoJSON({
  defaultDataProjection: 'EPSG:4326'
});
toastr.options = {
  closeButton: false,
  debug: false,
  newestOnTop: false,
  progressBar: false,
  positionClass: 'toast-top-center',
  preventDuplicates: false,
  onclick: null,
  showDuration: '300',
  hideDuration: '1000',
  timeOut: '5000',
  extendedTimeOut: '1000',
  showEasing: 'swing',
  hideEasing: 'linear',
  showMethod: 'fadeIn',
  hideMethod: 'fadeOut'
};
var bing = new ol.layer.Tile({
  visible: true,
  source: new ol.source.BingMaps({
    key: 'Ak2Gq8VUfICsPpuf7LRANXmXt2sHWmSLPhohmVLFtFIEwYjs_5MCyAhAFwRSVpLj',
    imagerySet: 'Aerial'
  }),
  maxZoom: 19,
  crossOrigin: 'anonymous',
  preload: Infinity,
  id: 'bing'
});
var mapbox = new ol.layer.Tile({
  source: new ol.source.XYZ({
    attributions: [new ol.Attribution({
      html: '<a href="https://www.mapbox.com/about/maps/" target="_blank">&copy; Mapbox &copy; OpenStreetMap</a>'
    })],
    url: 'https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA'
  }),
  id: 'mapbox'
});
function getIconType(estateType) {
  var iconType = {
    Apartment: function apartmentIcon() {
      return 'apartment';
    },
    'Detached House': function detachedHouceIcon() {
      return 'detached';
    },
    Villa: function villaIcon() {
      return 'villa';
    },
    Maisonette: function maisonetteIcon() {
      return 'villa';
    }
  };
  return (iconType[estateType])();
}

function getIconPath(listingType) {
  var iconPath = {
    true: function saleIcon() {
      return './images/pins/sale/';
    },
    false: function rentIcon() {
      return './images/pins/rent/';
    }
  };
  return (iconPath[listingType])();
}

function createPropertyStyle(feature) {
  var src;
  src = getIconPath(feature.get('sale')) + getIconType(feature.get('estatetype_en')) + '-48.png';
  return new ol.style.Style({
    geometry: feature.getGeometry(),
    image: new ol.style.Icon(({
      src: src,
      anchorOrigin: 'bottom-left',
      anchor: [0.5, 0],
      scale: 1
    }))
  });
}

function propertyStyleFunction(feature, resolution) {
  var size = feature.get('features').length;
  var style;
  var originalFeature;
  if (size > 1) {
    style = [new ol.style.Style({
      image: new ol.style.Circle({
        radius: 20,
        stroke: new ol.style.Stroke({
          color: [156, 39, 176, 1],
          width: 5
        }),
        fill: new ol.style.Fill({
          color: [68, 138, 255, 0.8]
        })
      }),
      text: new ol.style.Text({
        text: size.toString(),
        fill: new ol.style.Fill({
          color: '#FFFFFF'
        })
      }),
      zIndex: 101
    })];
  } else {
    originalFeature = feature.get('features')[0];
    style = [createPropertyStyle(originalFeature)];
  }
  return style;
}

// function selectStyleFunction(feature, resolution) {
//   var styles = [new ol.style.Style({})];
//   var originalFeatures = feature.get('features');
//   var originaFeature;
//   for (var i = originalFeatures.length - 1; i >= 0; --i) {
//     originalFeature = originalFeatures[i];
//     styles.push(createPropertyStyle(originalFeature));
//   }
//   return styles;
// }
var propertySource = new ol.source.Vector({
  format: geoJSONFormat,
  loader: function featreLoader() {
    var self = this;
    this.clear();
    $.ajax({
      url: 'http://127.0.0.1:3000/db/listed',
      type: 'GET',
      dataType: 'json'
    })
      .done(function succeded(response) {
        var features = geoJSONFormat.readFeatures(response, {
          featureProjection: 'EPSG:3857'
        });
        self.addFeatures(features);
      })
      .fail(function failed(jqXHR, textStatus, errorThrown) {
        toastr.clear();
        if (jqXHR.status === 404) {
          toastr.error('Sorry, we cannot find any properties!');
        } else if (jqXHR.status === 503) {
          toastr.error('Service Unavailable');
        } else {
          toastr.error('Internal Server Error');
        }
      });
  },
  strategy: ol.loadingstrategy.bbox
});
var propertyClusterSource = new ol.source.Cluster({
  distance: 40,
  source: propertySource,
  attributions: [new ol.Attribution({
    html: 'All maps © ' + '<a href="http://www.terracognita.gr/">Terra Cognita</a>'
  })]
});
var property = new ol.layer.Vector({
  source: propertyClusterSource,
  id: 'estates',
  visible: true,
  style: propertyStyleFunction
});
property.setZIndex(2);
var PSAStyleFunction = function (feature, resolution) {
  var symbol = feature.get('style');
  var text;
  if (lang === 'el') {
    text = feature.get('name_el');
  } else {
    text = feature.get('name_en');
  }
  if (!styleCache[symbol]) {
    styleCache = [new ol.style.Style({
      image: new ol.style.Icon(({
        src: '../images/maki/renders/' + symbol + '-24.png',
        anchorOrigin: 'bottom-left',
        anchor: [0.5, 0.5],
        scale: 1
      })),
      text: new ol.style.Text({
        text: text,
        stroke: new ol.style.Stroke({
          color: [156, 39, 176, 0.8],
          width: 1
        }),
        offsetY: 12
      })
    })];
  }
  return styleCache;
};
var PSA = new ol.layer.Vector({
  style: PSAStyleFunction,
  maxResolution: 3
});
PSA.setZIndex(1);

function filteredEsateStyle(feature, resolution) {
  var src;
  src = getIconPath(feature.get('sale')) + getIconType(feature.get('estatetype_en')) + '-64.png';
  styleCache = [new ol.style.Style({
    image: new ol.style.Icon(({
      src: src,
      anchorOrigin: 'bottom-left',
      anchor: [0.5, 0],
      scale: 1
    }))
  })];
  return styleCache;
}
var filteredEstates = new ol.layer.Vector({
  source: new ol.source.Vector({
    format: geoJSONFormat
  }),
  id: 'filteredEstates',
  visible: true,
  style: filteredEsateStyle
});
filteredEstates.setZIndex(2);
var selectSource = new ol.source.Vector({});
var selectBox = new ol.layer.Vector({
  source: selectSource,
  style: new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(227, 72, 27, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: '#E3481B',
      width: 2
    }),
    image: new ol.style.Circle({
      radius: 7,
      fill: new ol.style.Fill({
        color: '#E3481B'
      })
    })
  })
});
selectBox.setZIndex(3);
var map = new ol.Map({
  target: 'map',
  layers: [mapbox, property, PSA, filteredEstates, selectBox],
  // interactions: ol.interaction.defaults().extend([new ol.interaction.Select({
  //   condition: function(evt) {
  //     return evt.type === 'singleclick' && ol.events.condition.shiftKeyOnly(evt);
  //   },
  //   style: selectStyleFunction
  // })]),
  loadTilesWhileAnimating: true,
  loadTilesWhileInteracting: true,
  renderer: 'canvas',
  controls: ol.control.defaults({
    attributionOptions: {
      collapsible: false,
      collapsed: false
    }
  })
    .extend([
      new ol.control.ScaleLine({
        units: 'metric'
      }), new ol.control.OverviewMap({
        className: 'ol-overviewmap ol-custom-overviewmap',
        collapsible: true,
        collapsed: true,
        layers: [bing]
      }),
      new ol.control.ZoomToExtent({
        extent: extent
      })
    ]),
  view: new ol.View({
    center: center,
    extent: extent,
    projection: 'EPSG:3857',
    zoom: 14,
    maxZoom: 19,
    minZoom: 14
  })
});
if (lang === 'el') {
  bing.set('name', 'Δορυφορική εικόνα');
  mapbox.set('name', 'Χάρτης');
  property.set('name', 'Ακίνητα');
} else {
  bing.set('name', 'Sattelite Image');
  mapbox.set('name', 'Map');
  property.set('name', 'Properties');
}
jQuery(document).ready(function ($) {
  $('.spinner').addClass('visuallyhidden');
  $('.mdl-spinner').removeClass('is-active');
  // handleSelect();
});
$(document)
  .ajaxStart(function () {
    $loading.addClass('is-active');
  })
  .ajaxStop(function () {
    $loading.removeClass('is-active');
  });

window.app || (window.app = {});
var app = window.app;
app.Filters = function (options) {
  this.estateType = options.estateType;
  this.leaseType = options.leaseType !== undefined ? options.leaseType : 'Rent';
  this.startPrice = options.startPrice !== undefined ? options.startPrice : 0;
  this.endPrice = options.endPrice !== undefined ? options.endPrice : 2147483647;
  this.parking = options.parking !== undefined ? options.parking : false;
  this.furnished = options.furnished !== undefined ? options.furnished : false;
  this.heating = options.heating !== undefined ? options.heating : false;
  this.cooling = options.cooling !== undefined ? options.cooling : false;
  this.view = options.view !== undefined ? options.view : false;
};
app.Filters.prototype.createValidator = function () {
  var p = $('form[name=filters]').parsley();
  return p;
};
app.Filters.prototype.setDefaults = function () {
  var epsg4326Extent;
  PSA.setSource(null);
  if (selectSource.getFeatures().length === 0) {
    epsg4326Extent = ol.proj.transformExtent(extent, 'EPSG:3857', 'EPSG:4326');
  } else {
    epsg4326Extent = ol.proj.transformExtent(selectSource.getFeatures()[0]
      .getGeometry().getExtent(), 'EPSG:3857', 'EPSG:4326');
  }
  this.extent = epsg4326Extent;
  this.p = this.createValidator();
};
app.Filters.prototype.ajaxCall = function () {
  if (this.p.validate() === true) {
    $.ajax({
      url: 'http://127.0.0.1:3000/db/listed/filters?bbox[x1]=' + this.extent[0] + '&bbox[y1]=' + this.extent[1] + '&bbox[x2]=' + this.extent[2] + '&bbox[y2]=' + this.extent[3],
      type: 'GET',
      dataType: 'json',
      data: {
        estateType: this.estateType,
        leaseType: this.leaseType,
        furnished: this.furnished,
        heating: this.heating,
        parking: this.parking,
        cooling: this.cooling,
        view: this.view,
        startPrice: this.startPrice,
        endPrice: this.endPrice
      }
    }).done(function succeded(data, textStatus, jqXHR) {
      var features = geoJSONFormat.readFeatures(data, {
        featureProjection: 'EPSG:3857'
      });
        toastr.clear();
        filteredEstates.getSource().clear();
        filteredEstates.getSource().addFeatures(features);
        filteredEstates.setVisible(true);
        property.setVisible(false);
        toastr.info('Found ' + features.length + ' properties');
    })
    .fail(function failed(jqXHR) {
      // var a = jQuery.parseJSON(jqXHR.responseText); // response is Json so we need to parse
      toastr.clear();
      if (jqXHR.status === 404) {
        toastr.error('No properties found wit these filters');
      } else if (jqXHR.status === 503) {
        toastr.error('Service Unavailable');
      } else {
        toastr.error('Internal Server Error');
      }
      filteredEstates.setVisible(false);
      property.setVisible(true);
    });
  }
};
$('#invokeFilters').click(function () {
  var filters;
  var options = {};
  options.estateType = $('#estateType').val();
  options.leaseType = $('input[name=options]:checked').val();
  options.startPrice = $('#startPrice').val();
  options.endPrice = $('#endPrice').val();
  options.parking = $('#checkbox-1').prop('checked');
  options.furnished = $('#checkbox-2').prop('checked');
  options.heating = $('#checkbox-3').prop('checked');
  options.cooling = $('#checkbox-4').prop('checked');
  options.view = $('#checkbox-5').prop('checked');
  filters = new app.Filters(options);
  filters.setDefaults();
  filters.ajaxCall();
});
$('#clearFilters').click(function () {
  var orignalEstateTypeValue = $('#estateType option').val();
  var orignalPriceRangeValue = $('#priceSelect option').val();
  $('label[for=option-1]').addClass('is-checked');
  $('label[for=option-2]').removeClass('is-checked');
  $('label[for=checkbox-1]').removeClass('is-checked');
  $('label[for=checkbox-2]').removeClass('is-checked');
  $('label[for=checkbox-3]').removeClass('is-checked');
  $('label[for=checkbox-4]').removeClass('is-checked');
  $('label[for=checkbox-5]').removeClass('is-checked');
  $('label[for=checkbox-6]').removeClass('is-checked');
  $('#estateType').siblings().find('.mdl-selectfield__box-value').html(orignalEstateTypeValue);
  $('#priceSelect').siblings().find('.mdl-selectfield__box-value').html(orignalPriceRangeValue);
  $('#startPrice').parent().eq(0).removeClass('is-dirty');
  $('#endPrice').parent().eq(0).removeClass('is-dirty');
  $('#estateProperties').addClass('estateProperties');
  filteredEstates.getSource().clear();
  property.setVisible(true);
  PSA.setSource(null);
  selectSource.clear();
  map.removeInteraction(draw);
});
var draw;
function addInteraction() {
  selectSource.clear();
  draw = new ol.interaction.Draw({
    source: selectSource,
    type: 'LineString',
    geometryFunction: geometryFunction,
    maxPoints: 2
  });
  draw.on('drawstart', function () {
    selectSource.clear();
  });
  draw.on('drawend', function () {
    map.removeInteraction(draw);
  });
  map.addInteraction(draw);
}
function geometryFunction(coordinates, geometry) {
  if (!geometry) {
    geometry = new ol.geom.Polygon(null);
  }
  var start = coordinates[0];
  var end = coordinates[1];
  geometry.setCoordinates([
    [
      start,
      [
        start[0], end[1]
      ],
      end,
      [
        end[0], start[1]
      ],
      start
    ]
  ]);
  return geometry;
}
$('#checkbox-6').click(function () {
  if (this.checked) {
    addInteraction();
  } else {
    map.removeInteraction(draw);
    selectSource.clear();
  }
});


var handleFilters = (function handleFilters() {
  'use strict';

  function selectRange() {
    $('#priceSelect').change(function (e) {
      var val = $(this).val();
      if (val === 100000) {
        $('#startPrice').val('0').parent().eq(0).addClass('is-dirty');
        $('#endPrice').val('100000').parent().eq(0).addClass('is-dirty');
      } else if (val === 150000) {
        $('#startPrice').val('100000').parent().eq(0).addClass('is-dirty');
        $('#endPrice').val('150000').parent().eq(0).addClass('is-dirty');
      } else if (val === 200000) {
        $('#startPrice').val('150000').parent().eq(0).addClass('is-dirty');
        $('#endPrice').val('200000').parent().eq(0).addClass('is-dirty');
      } else if (val === 250000) {
        $('#startPrice').val('200000').parent().eq(0).addClass('is-dirty');
        $('#endPrice').val('250000').parent().eq(0).addClass('is-dirty');
      } else if (val === 300000) {
        $('#startPrice').val('250000').parent().eq(0).addClass('is-dirty');
        $('#endPrice').val('300000').parent().eq(0).addClass('is-dirty');
      } else {
        $('#startPrice').val('250000').parent().eq(0).addClass('is-dirty');
        $('#endPrice').val('300000').parent().eq(0).addClass('is-dirty');
      }
    });
  }

  return {
    selectRange: selectRange
  };
}());
function getValueRange(listingType) {
  var saleType = {
    Sale: function sale() {
      $('#priceSelect').change(function (e) {
        var val = $(this).val();
        if (val === '100000') {
          $('#startPrice').val('0').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('100000').parent().eq(0).addClass('is-dirty');
        } else if (val === '150000') {
          $('#startPrice').val('100000').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('150000').parent().eq(0).addClass('is-dirty');
        } else if (val === '200000') {
          $('#startPrice').val('150000').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('200000').parent().eq(0).addClass('is-dirty');
        } else if (val === '250000') {
          $('#startPrice').val('200000').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('250000').parent().eq(0).addClass('is-dirty');
        } else if (val === '300000') {
          $('#startPrice').val('250000').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('300000').parent().eq(0).addClass('is-dirty');
        } else {
          $('#startPrice').val('300000').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('');
        }
      });
    },
    Rent: function rent() {
      $('#priceSelect').change(function (e) {
        var val = $(this).val();
        if (val === '300') {
          $('#startPrice').val('0').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('300').parent().eq(0).addClass('is-dirty');
        } else if (val === '450') {
          $('#startPrice').val('300').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('450').parent().eq(0).addClass('is-dirty');
        } else if (val === '600') {
          $('#startPrice').val('450').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('600').parent().eq(0).addClass('is-dirty');
        } else {
          $('#startPrice').val('600').parent().eq(0).addClass('is-dirty');
          $('#endPrice').val('');
        }
      });
    }
  };
  return (saleType[listingType])();
}
$(function () {
  getValueRange('Rent');
  $('input[type=radio][name=options]').change(function () {
    var value = this.value;
    var type = {
      rangeType: this.value
    };
    $('#startPrice').val('').parent().eq(0).removeClass('is-dirty');
    $('#endPrice').val('').parent().eq(0).removeClass('is-dirty');
    dust.render('valueRange', type, function (error, html) {
      $('.priceSelect').html(html);
      componentHandler.upgradeAllRegistered();
      getValueRange(value);
    });
  }
  );
$('#advanced-filters').on('click', function (event) {
  event.preventDefault();
  if ($('#estateProperties').hasClass('estateProperties')) {
    $('#estateProperties').removeClass('estateProperties');
  } else {
    $('#estateProperties').addClass('estateProperties');
  }
});
});
function preventDotAndSpace(e) {
  var key = e.charCode ? e.charCode : e.keyCode;
  this.innerHTML = key;
  if (key === 46 || key === 32) {
    return false;
  }
}

(function () {
  var geolocation = new ol.Geolocation({
    // take the projection to use from the map's view
    projection: map.getView().getProjection(),
    trackingOptions: {
      maximumAge: 10000,
      enableHighAccuracy: true,
      timeout: 600000
    }
  });
  var accuracyFeature = new ol.Feature();
  geolocation.on('change:accuracyGeometry', function () {
    accuracyFeature.setGeometry(geolocation.getAccuracyGeometry());
  });
  var positionFeature = new ol.Feature();
  positionFeature.setStyle(new ol.style.Style({
    image: new ol.style.Circle({
      radius: 6,
      fill: new ol.style.Fill({ color: '#3399CC' }),
      stroke: new ol.style.Stroke({ color: '#fff', width: 2 })
    })
  }));
  // listen to changes in position
  geolocation.on('change:position', function () {
    var coordinates = geolocation.getPosition();
    positionFeature.setGeometry(coordinates
      ? new ol.geom.Point(coordinates)
      : null);
  });
  featuresOverlaySource = new ol.source.Vector({});
  var featuresOverlay = new ol.layer.Vector({ map: map, source: featuresOverlaySource });
  $('.geolocation').on('change', function (e) {
    e.preventDefault();
    if ($(this).prop('checked') === true) {
      geolocation.setTracking(true);
      featuresOverlaySource.addFeatures([positionFeature, accuracyFeature]);
    } else {
      geolocation.setTracking(false);
      featuresOverlaySource.clear();
    }
  });
}());

function handleInfo(evt) {
  var coordinate = evt.coordinate;
  var obj = {};
  var title = {};
  var owner = {};
  var features = [];
  var clickedFeature;
  var f;

  map.removeInteraction(draw);
  evt.preventDefault();
  obj.title = title;
  if (lang === 'el') {
    title.gid = 'Κωδικός Ιδιοκτησίας';
    title.type = 'Είδος Ιδιοκτησίας';
    title.listing_type = 'Τύπος Αγγελίας';
    title.area = 'Εμβαδό';
    title.address = 'Διευθυνση';
    title.bedrooms = 'Υπνοδωμάτια';
    title.price = 'Τιμή';
    title.isnew = 'Νεόδμητο';
    title.parking = 'Στάθμεση';
    title.furnished = 'Επιπλωμένο';
    title.pets = 'Κατοικίδια';
    title.view = 'Θέα';
    title.heating = 'Θέρμανση';
    title.cooling = 'Ψύξη';
    title.contactInfo = 'Στοιχεία Επικοινωνίας';
    title.name = 'Όνομα';
    title.lastname = 'Επίθετο';
    title.phone = 'Τηλέφωνο';
    title.email = 'Ηλεκτρονική Διεύθυνση';
  } else {
    title.gid = 'Estate Code';
    title.type = 'Property Type';
    title.listing_type = 'Listing Type';
    title.area = 'Size';
    title.address = 'Address';
    title.bedrooms = 'Bedrooms';
    title.price = 'Price';
    title.isnew = 'Newly Build';
    title.parking = 'Parking';
    title.furnished = 'Furnished';
    title.pets = 'Pets Allowed';
    title.view = 'View';
    title.heating = 'Heating';
    title.cooling = 'Cooling';
    title.contactInfo = 'Contact Info';
    title.name = 'Name';
    title.lastname = 'Last Name';
    title.phone = 'Telephone';
    title.email = 'Email';
  }
  clickedFeature = map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
    return {
      feature: feature,
      layer: layer
    };
  }, this, function (layer) {
    if (layer.get('id') === 'estates' || layer.get('id') === 'filteredEstates') {
      return true;
    }
    return false;
  }, this);
  if (clickedFeature) {
    if (clickedFeature.layer.get('id') === 'estates' && clickedFeature.feature.get('features').length === 1) {
      f = clickedFeature.feature.getProperties().features[0];
      createPSAandCard(f, obj);
    } else if (clickedFeature.layer.get('id') === 'filteredEstates') {
      f = clickedFeature.feature;
      createPSAandCard(f, obj);
    }
  } else {
    PSA.setSource(null);
  }
}

function createPSAandCard(f, obj) {
  var feature = {};
  feature.gid = f.get('gid');
  feature.area = f.get('estatearea');
  if (lang === 'el') {
    feature.type = f.get('estatetype');
    feature.address = f.get('street_el') + ' ' + f.get('street_number');
    feature.name = f.get('name_el');
    feature.lastname = f.get('lastname_el');
    if (f.get('sale') === true) {
      feature.listing_type = 'Πώληση';
    } else {
      feature.listing_type = 'Ενοικίαση';
    }
    feature.btns = {
      info: 'πληροφοριες',
      close: 'κλεισιμο'
    };
  } else {
    feature.type = f.get('estatetype_en');
    feature.address = f.get('street_en') + ' ' + f.get('street_number');
    feature.name = f.get('name_en');
    feature.lastname = f.get('lastname_en');
    if (f.get('sale') === true) {
      feature.listing_type = 'Sale';
    } else {
      feature.listing_type = 'Rent';
    }
    feature.btns = {
      info: 'info',
      close: 'close'
    };
  }
  feature.bedrooms = f.get('bedrooms');
  feature.price = f.get('price');
  feature.isnew = f.get('isnew');
  feature.parking = f.get('parking');
  feature.furnished = f.get('furnished');
  feature.pets = f.get('pets');
  feature.view = f.get('view');
  feature.heating = f.get('heating');
  feature.cooling = f.get('cooling');
  feature.phone = f.get('phone1');
  feature.email = f.get('email');
  feature.coordinate = f.get('geometry').getCoordinates();

  var PSASource = new ol.source.Vector({
    attributions: [new ol.Attribution({
      html: 'POI by ' + '<a href="http://www.terracognita.gr/">Terra Cognita</a>'
    })],
    format: geoJSONFormat,
    loader: function (extent, resolution, projection) {
      var url = 'http://127.0.0.1:3000/db/uses/' + feature.gid;
      var self = this;
      $.ajax({
        url: url,
        type: 'GET',
        dataType: 'json'
      }).done(function succeded(data, textStatus, jqXHR) {
        var features = geoJSONFormat.readFeatures(data.property_services_analysis, {
          featureProjection: 'EPSG:3857'
        });
        var featuresLength = features.length - 1;
        var area = new ol.style.Style({
          fill: new ol.style.Fill({
            color: [156, 39, 176, 0.1]
          })
        });
        features[0].setStyle(area);
        self.addFeatures(features);
        toastr.clear();
        toastr.info('Found ' + featuresLength + ' Points of Interest in 8 minute distance!');
      }).fail(function failed(jqXHR) {
        toastr.clear();
        if (jqXHR.status === 404) {
          toastr.error('Sorry, we cannot find any Points of Interest in 8 minute distance!');
        } else if (jqXHR.status === 503) {
          toastr.error('Service Unavailable');
        } else {
          toastr.error('Internal Server Error');
        }
      });
    },
    strategy: ol.loadingstrategy.all
  });
  PSA.setSource(PSASource);
  map.getView().setCenter(feature.coordinate);
  map.getView().setResolution(1.2);
  obj.feature = feature;

  dust.render('estateCards', obj, function renderEstateCards(err, out) {
    $('.estate-cards').html(out);
    $('.mdl-card__title').css('background-image', 'url(http://res.cloudinary.com/firvain/image/upload/w_432,c_scale/' + obj.feature.gid + '.jpg)');
    $('.estate-cards').addClass('estate-cards-active');
  // $("#infobox").addClass("visuallyhidden");
  });
  $('a[href="#openModal"]').click(function () {
    dust.render('modalInfo', obj, function renderModalInfo(err, out) {
      $('.modal-content').html(out);
      $('.big-image').css('background-image', 'url(http://res.cloudinary.com/firvain/image/upload/h_222,c_scale/' + obj.feature.gid + '.jpg)');
    });
  });
  $('a[href="#closeEstateCard"]').click(function () {
    $('.estate-cards').removeClass('estate-cards-active');
  });
}
$('#information').on('click', function (e) {
  PSA.setSource(null);
  if ($(this).prop('checked') === true) {
    map.on('click', handleInfo);
    $(this).parent().siblings().find('input').each(function () {$(this).prop('disabled', true);});
  } else {
    map.un('click', handleInfo);
    $(this).parent().siblings().find('input').each(function () {$(this).prop('disabled', false);});
  }
});

(function () {
  var marker = new ol.Feature();
  var iconStyle = new ol.style.Style({
    image: new ol.style.Icon(/** @type {olx.style.IconOptions} */
    ({
      anchor: [
        0.5, 1
      ],
      anchorXUnits: 'fraction',
      anchorYUnits: 'fraction',
      opacity: 1,
      scale: 1,
      src: '../images/map-icons/pins/24/pin1.png',
      snapToPixel: false
    })),
    zIndex: 100
  });
  marker.setStyle(iconStyle);
  var featuresOverlayStyle = new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: '#408080',
      width: 5,
      lineDash: [4, 4]
    })
  });
  var featuresOverlay = new ol.layer.Vector({
    map: map,
    source: new ol.source.Vector(),
    style: featuresOverlayStyle,
    id: 'route',
    nameEl: 'Διαδρομή',
    NameEn: 'Route'
  });
  var routeCoords = [];
  function handleMarker(event) {
    event.preventDefault();
    var featureCount = featuresOverlay.getSource().getFeatures().length;
    var coordinates = event.coordinate;
    if (featureCount === 0) {
      marker.setGeometry(new ol.geom.Point(coordinates));
      marker.setId('first');
      featuresOverlay.getSource().addFeature(marker);
      routeCoords[0] = coordinates[0];
      routeCoords[1] = coordinates[1];
    } else if (featureCount === 1) {
      var clone = marker.clone();
      clone.setGeometry(new ol.geom.Point(coordinates));
      clone.setId('second');
      featuresOverlay.getSource().addFeature(clone);
      routeCoords[2] = coordinates[0];
      routeCoords[3] = coordinates[1];
      callRoute(routeCoords);
    } else {
      featuresOverlay.getSource().clear();
    }
  }
  geoJSONFormat = new ol.format.GeoJSON({ defaultDataProjection: 'EPSG:4326', geometryName: 'geometry' });
  function callRoute(routeCoords) {
    var first = ol.proj.transform([
      routeCoords[0], routeCoords[1]
    ], 'EPSG:3857', 'EPSG:4326');
    var second = ol.proj.transform([
      routeCoords[2], routeCoords[3]
    ], 'EPSG:3857', 'EPSG:4326');
    var x1 = first[0];
    var y1 = first[1];
    var x2 = second[0];
    var y2 = second[1];
    $.ajax({
      url: 'https://api.mapbox.com/v4/directions/mapbox.driving/' + x1 + ',' + y1 + ';' + x2 + ',' + y2 + '.json?alternatives=false&access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA',
      type: 'GET',
      dataType: 'json'
    }).done(function (data) {
      var route = {};
      route.type = 'Feature';
      route.geometry = data.routes[0].geometry;
      featuresOverlay.getSource().addFeatures(geoJSONFormat.readFeatures(route, {
        dataProjection: 'EPSG:4326',
        featureProjection: 'EPSG:3857'
      }));
      map.getView().fit(featuresOverlay.getSource().getExtent(), map.getSize());
    }).fail(function () {
      // console.log("error");
    }).always(function () {
      // console.log("complete");
    });
  }
  $('#marker').on('change', function (event) {
    event.preventDefault();
    /* Act on the event */
    if ($(this).prop('checked') === true) {
      map.on('singleclick', handleMarker);
    } else {
      map.un('singleclick', handleMarker);
      featuresOverlay.getSource().clear();
    }
  });
}());

(function () {
  $('#weather').click(function () {
    if ($(this).prop('checked') === true) {
      $(this).parent().siblings().find('input').each(function () {$(this).prop('disabled', true);});
      map.getOverlays().forEach(function (ovl) {
        if (ovl.get('name') === 'weather') {
          ($(ovl.getElement()).parent()).remove();
          $(ovl.getElement()).remove();
        }
      });
      var center = ol.proj.transform(map.getView().getCenter(), 'EPSG:3857', 'EPSG:4326');
      var lat = center[1];
      var lon = center[0];
      $.ajax({
        url: 'http://api.openweathermap.org/data/2.5/find?lat=' + lat + '&lon=' + lon + '&cnt=5&cluster=no&units=metric&type=accurate&APPID=f9cd9fa2c427c3b115e87e4862619c5c',
        type: 'GET',
        dataType: 'json'
      }).done(function (data) {
        function createWeatherOverlay(position, index) {
          var elem = document.createElement('div');
          elem.setAttribute('class', 'weather-popup  mdl-shadow--6dp');
          elem.setAttribute('id', index);
          elem.setAttribute('data-name', 'weather');
          return new ol.Overlay({ element: elem, position: position });
        }
        var objs = data.list;
        var overlay,
          coordinates;
        $.each(objs, function (index, val) {
          coordinates = ol.proj.transform([
            val.coord.lon, val.coord.lat
          ], 'EPSG:4326', 'EPSG:3857');
          overlay = createWeatherOverlay(coordinates, index);
          map.addOverlay(overlay);
          overlay.set('name', 'weather');
          weatherData = {
            'name': val.name,
            'temp': val.main.temp,
            'pressure': val.main.pressure,
            'humidity': val.main.humidity
          };
          dust.render('weatherPopup', weatherData, function (err, out) {
            $('#' + index).html(out);
          });
        });
      }).fail(function () {
        // toastr.error("Δεν βρέθηκαν πληροφορίες για τις καιρικές συνθήκες!");
      });
    } else if ($(this).prop('checked') === false) {
      $(this).parent().siblings().find('input').each(function () {$(this).prop('disabled', false);});
      map.getOverlays().forEach(function (ovl) {
        if (ovl.get('name') === 'weather') {
          ($(ovl.getElement()).parent()).remove();
          $(ovl.getElement()).remove();
        }
      });
    }
  });
}());

//# sourceMappingURL=data:application/json;base64,
