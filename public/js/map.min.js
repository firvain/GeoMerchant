var map1;
var bbox;
// var trans;
var dustBluebird = Promise.promisifyAll(dust);


var utils = {
  findById: function findById(map, id) {
    var layers = map.getLayers();
    var length = layers.getLength();
    for (var i = 0; i < length; i++) {
      if (id === layers.item(i).get('id')) {
        return layers.item(i);
      }
    }
    return null;
  },
  findByName: function findByName(map, name) {
    var layers = map.getLayers();
    var length = layers.getLength();
    for (var i = 0; i < length; i++) {
      if (name === layers.item(i).get('name')) {
        return layers.item(i);
      }
    }
    return null;
  },
  preventDotAndSpace: function preventDotAndSpace(e) {
    var key = e.charCode ? e.charCode : e.keyCode;
    this.innerHTML = key;
    if (key === 46 || key === 32) {
      return false;
    }
    return true;
  },
  geometryFunction: function geometryFunction(coordinates, geometry) {
    var geom;
    var start;
    var end;
    if (!geometry) {
      geom = new ol.geom.Polygon(null);
    } else {
      geom = geometry;
    }
    start = coordinates[0];
    end = coordinates[1];
    geom.setCoordinates([
      [
        start,
        [
          start[0], end[1]
        ],
        end,
        [
          end[0], start[1]
        ],
        start
      ]
    ]);
    return geom;
  }
};

var mymap = (function (window, document, undefined, Promise, ol, utils) {
  'use strict';
  var center = [3677385, 4120949];
  var extent = [3652772, 4112808, 3700000, 4132797];
  var geoJSONFormat = new ol.format.GeoJSON({
    defaultDataProjection: 'EPSG:4326'
  });

  var mapStyles = {
    iconType: function iconType(estateType) {
      var type = {
        Apartment: function apartmentIcon() {
          return 'apartment';
        },
        'Detached House': function detachedHouceIcon() {
          return 'detached';
        },
        Villa: function villaIcon() {
          return 'villa';
        },
        Maisonette: function maisonetteIcon() {
          return 'villa';
        }
      };
      return (type[estateType])();
    },
    iconPath: function iconPath(listingType) {
      var path = {
        true: function saleIcon() {
          return './images/pins/sale/';
        },
        false: function rentIcon() {
          return './images/pins/rent/';
        }
      };
      return (path[listingType])();
    },
    estates: function estates(feature) {
      var src = mapStyles.iconPath(feature.get('sale')) +
      mapStyles.iconType(feature.get('estatetype_en')) + '-48.png';
      return new ol.style.Style({
        geometry: feature.getGeometry(),
        image: new ol.style.Icon(({
          src: src,
          anchorOrigin: 'bottom-left',
          anchor: [0.5, 0],
          scale: 1
        }))
      });
    },
    cluster: function cluster(feature) {
      var size = feature.get('features').length;
      var style;
      var originalFeature;
      if (size > 1) {
        style = [new ol.style.Style({
          image: new ol.style.Circle({
            radius: 20,
            stroke: new ol.style.Stroke({
              color: [156, 39, 176, 1],
              width: 5
            }),
            fill: new ol.style.Fill({
              color: [68, 138, 255, 0.8]
            })
          }),
          text: new ol.style.Text({
            text: size.toString(),
            fill: new ol.style.Fill({
              color: '#FFFFFF'
            })
          }),
          zIndex: 101
        })];
      } else {
        originalFeature = feature.get('features')[0];
        style = [mapStyles.estates(originalFeature)];
      }
      return style;
    },
    poi: function poi(feature) {
      var styleCache = {};
      var symbol = feature.get('style');
      var text;
      if (window.trans.lang === 'el') {
        text = feature.get('name_el');
      } else {
        text = feature.get('name_en');
      }
      if (!styleCache[symbol]) {
        styleCache = [new ol.style.Style({
          image: new ol.style.Icon(({
            src: '../images/maki/renders/' + symbol + '-24.png',
            anchorOrigin: 'bottom-left',
            anchor: [0.5, 0.5],
            scale: 1
          })),
          text: new ol.style.Text({
            text: text,
            stroke: new ol.style.Stroke({
              color: [156, 39, 176, 0.8],
              width: 1
            }),
            offsetY: 12
          })
        })];
      }
      return styleCache;
    },
    filteredEstates: function filteredEstates(feature) {
      var src = mapStyles.iconPath(feature.get('sale')) +
      mapStyles.iconType(feature.get('estatetype_en')) + '-48.png';
      return new ol.style.Style({
        image: new ol.style.Icon(({
          src: src,
          anchorOrigin: 'bottom-left',
          anchor: [0.5, 0],
          scale: 1
        }))
      });
    }
  };


  var mapSources = {
    bing: function bing() {
      return new ol.source.BingMaps({
        key: 'Ak2Gq8VUfICsPpuf7LRANXmXt2sHWmSLPhohmVLFtFIEwYjs_5MCyAhAFwRSVpLj',
        imagerySet: 'AerialWithLabels'
      });
    },
    mapBox: function mapBox() {
      return new ol.source.XYZ({
        attributions: [new ol.Attribution({
          html: '<a href="https://www.mapbox.com/about/maps/" target="_blank">&copy; Mapbox &copy; OpenStreetMap</a>'
        })],
        url: 'https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZmlydmFpbiIsImEiOiJlOWYyYTM0NThiNWM0YjJjODJjNDE4ODQzNzA2MGQyNiJ9.-NVDO27Hzt-w_nQosUPfLA'
      });
    },
    estates: function estates() {
      return new ol.source.Vector({
        format: geoJSONFormat,
        loader: function featreLoader() {
          var self = this;
          this.clear();
          $.ajax({
            url: 'http://127.0.0.1:3000/db/listed',
            type: 'GET',
            dataType: 'json'
          })
            .done(function succeded(response) {
              var features = geoJSONFormat.readFeatures(response, {
                featureProjection: 'EPSG:3857'
              });
              self.addFeatures(features);
            })
            .fail(function failed(jqXHR) {
              toastr.clear();
              if (jqXHR.status === 404) {
                toastr.error('Sorry, we cannot find any properties!');
              } else if (jqXHR.status === 503) {
                toastr.error('Service Unavailable');
              } else {
                toastr.error('Internal Server Error');
              }
            });
        }
      });
    },
    cluster: function cluster() {
      return new ol.source.Cluster({
        distance: 40,
        source: mapSources.estates(),
        attributions: [new ol.Attribution({
          html: 'All maps Â© <a href="http://www.terracognita.gr/">Terra Cognita</a>'
        })]
      });
    },
    select: function select() {
      return new ol.source.Vector({});
    },
    poi: function poi() {
      return new ol.source.Vector({
        attributions: [new ol.Attribution({
          html: 'POI by <a href="http://www.terracognita.gr/">Terra Cognita</a>'
        })],
        format: geoJSONFormat
      });
    }
  };

  var mapLayers = {
    bing: function bing(trans) {
      return new ol.layer.Tile({
        visible: true,
        source: mapSources.bing(),
        maxZoom: 19,
        crossOrigin: 'anonymous',
        preload: Infinity,
        id: 'bing',
        name: trans.layers.bing
      });
    },
    mapBox: function mapBox(trans) {
      return new ol.layer.Tile({
        source: mapSources.mapBox(),
        id: 'mapbox',
        name: trans.layers.mapBox
      });
    },
    estates: function estates(trans) {
      return new ol.layer.Vector({
        source: mapSources.cluster(),
        id: 'estates',
        visible: true,
        style: mapStyles.cluster,
        zIndex: 2,
        name: trans.layers.estates
      });
    },
    poi: function poi(trans) {
      return new ol.layer.Vector({
        source: mapSources.poi(),
        style: mapStyles.poi,
        maxResolution: 3,
        zIndex: 1,
        id: 'poi'
      });
    },
    filteredEstates: function filteredEstates(trans) {
      return new ol.layer.Vector({
        source: new ol.source.Vector({
          format: geoJSONFormat
        }),
        id: 'filteredEstates',
        visible: true,
        style: mapStyles.filteredEstates,
        zIndex: 2
      });
    },
    select: function select() {
      return new ol.layer.Vector({
        source: mapSources.select(),
        style: new ol.style.Style({
          fill: new ol.style.Fill({
            color: 'rgba(227, 72, 27, 0.2)'
          }),
          stroke: new ol.style.Stroke({
            color: '#E3481B',
            width: 2
          }),
          image: new ol.style.Circle({
            radius: 7,
            fill: new ol.style.Fill({
              color: '#E3481B'
            })
          })
        }),
        zIndex: 3,
        id: 'select'
      });
    }
  };
  var initialize = function initialize(trans) {
    var layers = Object.keys(mapLayers).map(function addMapLayers(key) {
      return mapLayers[key](trans);
    });
    return new ol.Map({
      target: 'map',
      layers: layers,
      loadTilesWhileAnimating: true,
      loadTilesWhileInteracting: true,
      renderer: 'canvas',
      controls: ol.control.defaults({
        attributionOptions: {
          collapsible: false,
          collapsed: false
        }
      })
       .extend([
         new ol.control.ScaleLine({
           units: 'metric'
         }), new ol.control.OverviewMap({
           className: 'ol-overviewmap ol-custom-overviewmap',
           collapsible: true,
           collapsed: true,
           layers: [mapLayers.bing(trans)]
         }),
         new ol.control.ZoomToExtent({
           extent: extent
         })
       ]),
      view: new ol.View({
        center: center,
        extent: extent,
        projection: 'EPSG:3857',
        zoom: 14,
        maxZoom: 19,
        minZoom: 14
      })
    });
  };
  return {
    initialize: initialize
  };
}(window, document, undefined, Promise, ol, utils));

var filters = (function filters(window, document, Promise, $, utils, Parsley) {
  'use strict';
  function addResults(data, map) {
    var geoJSONFormat = new ol.format.GeoJSON({
      defaultDataProjection: 'EPSG:4326'
    });
    var features = geoJSONFormat.readFeatures(data, {
      featureProjection: 'EPSG:3857'
    });
    utils.findById(map, 'filteredEstates').getSource().addFeatures(features);
    if (trans.lang === 'el') {
      toastr.info('ÎÏÎ­Î¸Î·ÎºÎ±Î½ ' + features.length + ' Î¹Î´Î¹Î¿ÎºÏÎ·ÏÎ¯ÎµÏ!');
    } else {
      toastr.info('Found ' + features.length + ' estates!');
    }
  }
  function clearResults(map) {
    utils.findById(map, 'filteredEstates').getSource().clear();
  }
  function setOptions(map) {
    var filterData = {};
    filterData.estateType = $('#estateType').val();
    filterData.leaseType = $('input[name=options]:checked').val() !== undefined ? $('input[name=options]:checked').val() : 'Rent';
    filterData.startPrice = $('#startPrice').val() !== '' ? $('#startPrice').val() : 0;
    filterData.endPrice = $('#endPrice').val() !== '' ? $('#endPrice').val() : 2147483647;
    filterData.areaStart = $('#area-start').val() !== '' ? $('#area-start').val() : 0;
    filterData.areaEnd = $('#area-end').val() !== '' ? $('#area-end').val() : 2147483647;
    filterData.parking = $('#checkbox-1').prop('checked') !== undefined ? $('#checkbox-1').prop('checked') : false;
    filterData.furnished = $('#checkbox-2').prop('checked') !== undefined ? $('#checkbox-2').prop('checked') : false;
    filterData.heating = $('#checkbox-3').prop('checked') !== undefined ? $('#checkbox-3').prop('checked') : false;
    filterData.cooling = $('#checkbox-4').prop('checked') !== undefined ? $('#checkbox-4').prop('checked') : false;
    filterData.view = $('#checkbox-5').prop('checked') !== undefined ? $('#checkbox-5').prop('checked') : false;
    filterData.bbox = window.bbox !== undefined ? window.bbox : ol.proj.transform(utils.findById(map, 'estates').getSource().getExtent(), 'EPSG:3857', 'EPSG:4326');
    console.log(filterData);
    return filterData;
  }
  function getResults(options, map) {
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/db/listed/filters',
        type: 'GET',
        dataType: 'json',
        data: options
      })
    )
    .then(function resolve(data) {
      utils.findById(map, 'estates').setVisible(false);
      utils.findById(map, 'poi').getSource().clear();
      clearResults(map);
      addResults(data, map);
    }).catch(function error(e) {
      if (e.status === 404) {
        toastr.error(trans.errors.property[404]);
      } else if (e.status === 503) {
        toastr.error(trans.errors.property[503]);
      } else {
        toastr.error(trans.errors.internal);
      }
    });
  }
  function chooseByArea(draw) {
    var map = draw.getMap();
    $(map.getViewport()).mouseleave(function leaveMapForAreaSelection(event) {
      event.preventDefault();
      event.stopPropagation();
      draw.setActive(false);
    });
    $(map.getViewport()).mouseenter(function enterMapForAreaSelection(event) {
      event.preventDefault();
      event.stopPropagation();
      draw.setActive(true);
    });
    draw.on('drawstart', function drawstart() {
      utils.findById(map, 'select').getSource().clear();
    });
    draw.on('drawend', function drawend(e) {
      var coordinates = e.feature.getGeometry().getExtent();
      var transformedCoordinates = _.chunk(coordinates, 2).map(function split(currentValue) {
        return ol.proj.transform(currentValue, 'EPSG:3857', 'EPSG:4326');
      });
      window.bbox = _.concat(transformedCoordinates[0], transformedCoordinates[1]);
    });
  }
  function init(map) {
    var drawInteraction = new ol.interaction.Draw({
      source: utils.findById(map, 'select').getSource(),
      type: 'LineString',
      geometryFunction: utils.geometryFunction,
      maxPoints: 2
    });
    drawInteraction.setProperties({
      id: 'draw'
    });
    drawInteraction.setActive(false);
    $('#checkbox-6').change(function enableAreaSelection() {
      if (this.checked) {
        map.addInteraction(drawInteraction);
        chooseByArea(drawInteraction);
      } else {
        map.removeInteraction(drawInteraction);
        drawInteraction.setActive(false);
        utils.findById(map, 'select').getSource().clear();
      }
    });
    $('#invokeFilters').click(function invokeFilters(event) {
      var options;
      event.preventDefault();
      event.stopPropagation();
      options = setOptions(map);
      if ($('form[name=filters]').parsley().validate()) {
        getResults(options, map);
      }
    });
    $('#clearFilters').click(function clearFilters(event) {
      event.preventDefault();
      event.stopPropagation();
      clearResults(map);
      $('label[for=option-1]').addClass('is-checked');
      $('#option-1').prop('checked', true);
      $('label[for=option-2]').removeClass('is-checked');
      $('#option-2').prop('checked', false);
      $('.mdl-checkbox__input').each(function clearCheckboxes(index, el) {
        $(el).prop('checked', false).parent('label')
        .removeClass('is-checked');
      });
      $('.mdl-textfield__input').each(function clearInputs(index, el) {
        if ($(el).attr('id') !== 'estateType') {
          $(el).val('').parent()
          .eq(0)
          .removeClass('is-dirty');
        } else {
          $(el).attr('data-val', 'Apartment');
          if (trans.lang === 'el') {
            $(el).val('ÎÎ¹Î±Î¼Î­ÏÎ¹ÏÎ¼Î±');
          } else {
            $('#estateType').val('Apartment');
          }
        }
      });
      utils.findById(map, 'estates').setVisible(true);
    });
  }
  return {
    init: init
  };
}(window, document, Promise, $, utils, Parsley));

var info = (function info(window, document, Promise, $, utils) {
  'use strict';
  var geoJSONFormat = new ol.format.GeoJSON({
    defaultDataProjection: 'EPSG:4326'
  });
  function extraInfoModal(feature) {
    var modalPromise;
    var obj = {};
    if (feature.get('rent')) {
      obj.listing_type = trans.listing.rent;
    } else {
      obj.listing_type = trans.listing.sale;
    }
    obj.type = feature.get('estatetype');
    obj.gid = feature.get('gid');
    if (trans.lang === 'el') {
      obj.address = feature.get('street_el') + '' +  feature.get('street_number');
      obj.contact = {
        name: feature.getProperties().name_el,
        lastname: feature.getProperties().lastname_el
      };
    } else {
      obj.address = feature.get('street_en') + '' +  feature.get('street_number');
      obj.contact = {
        name: feature.getProperties().name_en,
        lastname: feature.getProperties().lastname_en
      };
    }
    obj.area = feature.get('estatearea');
    obj.bedrooms = feature.get('bedrooms');
    obj.price = feature.get('price');
    obj.title = {
      gid: trans.estate.gid,
      listing_type: trans.listing.type,
      address: trans.estate.address,
      area: trans.estate.area,
      bedrooms: trans.estate.amenities.bedrooms,
      price: trans.listing.price,
      isnew: trans.estate.amenities.isnew,
      parking: trans.estate.amenities.parking,
      furnished: trans.estate.amenities.furnished,
      pets: trans.estate.amenities.pets,
      view: trans.estate.amenities.view,
      heating: trans.estate.amenities.heating,
      cooling: trans.estate.amenities.cooling,
      contactInfo: trans.contact.contactInfo,
      name: trans.contact.name,
      lastname: trans.contact.lastname,
      phone: trans.contact.phone,
      email: trans.contact.email
    };
    obj.isnew = feature.get('isnew');
    obj.furnished = feature.get('furnished');
    obj.pets = feature.get('pets');
    obj.btns = {
      info: trans.btns.info,
      close: trans.btns.close
    };
    if (feature.getProperties().phone2 !== null) {
      obj.contact.phone = feature.getProperties().phone1 + ' ' + feature.getProperties().phone2;
    } else {
      obj.contact.phone = feature.getProperties().phone1;
    }
    obj.contact.email = feature.getProperties().email;

    modalPromise = dustBluebird.renderAsync('modalInfo', obj)
    .then(function resolve(data) {
      $('#modal').removeClass('visuallyhidden');
      $('.modal-content').html(data);
    })
    .then(function resolve() {
      $('.big-image').css('background-image', 'url(http://res.cloudinary.com/firvain/image/upload/h_222,c_scale/' + feature.get('gid') + '.jpg)');
      console.log(feature);
    })
    .catch(function error(e) {
      console.log(e);
    });
    $('#modal-close').click(function closeModal() {
      $('#modal').addClass('visuallyhidden');
    });
  }
  function renderEstateCards(feature) {
    var estateCardsPromise;
    var obj = {};
    if (feature.get('rent')) {
      obj.listing_type = trans.listing.rent;
    } else {
      obj.listing_type = trans.listing.sale;
    }
    obj.type = feature.get('estatetype');
    obj.gid = feature.get('gid');
    if (trans.lang === 'el') {
      obj.address = feature.get('street_el') + '' +  feature.get('street_number');
    } else {
      obj.address = feature.get('street_en') + '' +  feature.get('street_number');
    }
    obj.area = feature.get('estatearea');
    obj.bedrooms = feature.get('bedrooms');
    obj.price = feature.get('price');
    obj.title = {
      listing_type: trans.listing.type,
      address: trans.estate.address,
      area: trans.estate.area,
      bedrooms: trans.estate.amenities.bedrooms,
      price: trans.listing.price,
      isnew: trans.estate.amenities.isnew,
      furnished: trans.estate.amenities.furnished,
      pets: trans.estate.amenities.pets
    };
    obj.isnew = feature.get('isnew');
    obj.furnished = feature.get('furnished');
    obj.pets = feature.get('pets');
    obj.btns = {
      info: trans.btns.info,
      close: trans.btns.close
    };
    estateCardsPromise = dustBluebird.renderAsync('estateCards', obj)
    .then(function resolve(data) {
      $('.estate-cards').html(data);
    })
    .then(function resolve() {
      $('.mdl-card__title').css('background-image', 'url(http://res.cloudinary.com/firvain/image/upload/w_432,c_scale/' + obj.gid + '.jpg)');
      $('.estate-cards').addClass('estate-cards-active');
      $('#estate-card-square-close').click(function close() {
        $('.estate-cards').removeClass('estate-cards-active');
      });
      $('#estate-card-square-extra-info').click(function extraInfo() {
        extraInfoModal(feature);
      });
    })
    .catch(function error(e) {
      console.log(e);
    });
  }
  function selectFeature(evt) {
    var map = evt.map;
    // var coordinate = evt.coordinate;
    var f;
    var clickedFeature = map.forEachFeatureAtPixel(evt.pixel, function findFeature(feature, layer) {
      return {
        feature: feature,
        layer: layer
      };
    }, this, function clickedFeatureLayerFilter(layer) {
      if (layer.get('id') === 'estates' || layer.get('id') === 'filteredEstates') {
        return true;
      }
      return false;
    }, this);
    if (clickedFeature) {
      if (clickedFeature.layer.get('id') === 'estates' &&
        clickedFeature.feature.get('features').length === 1) {
        f = clickedFeature.feature.getProperties().features[0];
        renderEstateCards(f);
        map.getView().setCenter(f.getGeometry().getCoordinates());
        map.getView().setZoom(16);
        Promise.resolve(
          $.ajax({
            url: 'http://127.0.0.1:3000/db/uses/' + f.getProperties().gid,
            type: 'GET',
            dataType: 'json'
          })
        )
        .then(function resolve(data) {
          var features;
          utils.findById(map, 'poi').getSource().clear();
          features = geoJSONFormat.readFeatures(data.property_services_analysis, {
            featureProjection: 'EPSG:3857'
          });
          features.forEach(function removePolygon(feature) {
            if (feature.getGeometry().getType() === 'Polygon') {
              features.splice(features.indexOf(feature), 1);
            }
          });
          utils.findById(map, 'poi').getSource().addFeatures(features);
          // map.getView().fit(utils.findById(map, 'poi').getSource().getExtent(), map.getSize());

          toastr.info('Found ' + features.length + ' Points of Interest in 8 minute distance!');
        })
        .catch(function error(e) {
          utils.findById(map, 'poi').getSource().clear();
          if (e.status === 404) {
            toastr.error('Sorry, we cannot find any Points of Interest in 8 minute distance!');
          } else {
            console.log(e);
            toastr.error(e.responseText);
          }
        });
      } else if (clickedFeature.layer.get('id') === 'filteredEstates') {
        f = clickedFeature.feature;
        renderEstateCards(f);
        Promise.resolve(
          $.ajax({
            url: 'http://127.0.0.1:3000/db/uses/' + f.getProperties().gid,
            type: 'GET',
            dataType: 'json'
          })
        )
        .then(function resolve(data) {
          var features;
          if (utils.findById(map, 'poi').getSource().getFeatures().length !== 0) {
            utils.findById(map, 'poi').getSource().clear();
          }
          features = geoJSONFormat.readFeatures(data.property_services_analysis, {
            featureProjection: 'EPSG:3857'
          });
          features.forEach(function removePolygon(feature) {
            if (feature.getGeometry().getType() === 'Polygon') {
              features.splice(features.indexOf(feature), 1);
            }
          });
          utils.findById(map, 'poi').getSource().addFeatures(features);
          map.getView().fit(utils.findById(map, 'poi').getSource().getExtent(), map.getSize());
          toastr.info('Found ' + features.length + ' Points of Interest in 8 minute distance!');
          console.log(trans);
        })
        .catch(function error(e) {
          if (e.status === 404) {
            toastr.error('Sorry, we cannot find any Points of Interest in 8 minute distance!');
          } else {
            console.log(e);
            toastr.error(e.responseText);
          }
        });
      }
    } else {
      utils.findById(map, 'poi').getSource().clear();
    }
  }

  function init(map) {
    map.on('click', selectFeature);
  }
  function disable(map) {
    map.un('click', selectFeature);
  }
  return {
    init: init,
    disable: disable
  };
}(window, document, Promise, jQuery, utils));


// function handleInfo(evt) {
//   var coordinate = evt.coordinate;
//   var obj = {};
//   var title = {};
//   var owner = {};
//   var features = [];
//   var clickedFeature;
//   var f;

//   map.removeInteraction(draw);
//   evt.preventDefault();
//   obj.title = title;
//   if (lang === 'el') {
//     title.gid = 'ÎÏÎ´Î¹ÎºÏÏ ÎÎ´Î¹Î¿ÎºÏÎ·ÏÎ¯Î±Ï';
//     title.type = 'ÎÎ¯Î´Î¿Ï ÎÎ´Î¹Î¿ÎºÏÎ·ÏÎ¯Î±Ï';
//     title.listing_type = 'Î¤ÏÏÎ¿Ï ÎÎ³Î³ÎµÎ»Î¯Î±Ï';
//     title.area = 'ÎÎ¼Î²Î±Î´Ï';
//     title.address = 'ÎÎ¹ÎµÏÎ¸ÏÎ½ÏÎ·';
//     title.bedrooms = 'Î¥ÏÎ½Î¿Î´ÏÎ¼Î¬ÏÎ¹Î±';
//     title.price = 'Î¤Î¹Î¼Î®';
//     title.isnew = 'ÎÎµÏÎ´Î¼Î·ÏÎ¿';
//     title.parking = 'Î£ÏÎ¬Î¸Î¼ÎµÏÎ·';
//     title.furnished = 'ÎÏÎ¹ÏÎ»ÏÎ¼Î­Î½Î¿';
//     title.pets = 'ÎÎ±ÏÎ¿Î¹ÎºÎ¯Î´Î¹Î±';
//     title.view = 'ÎÎ­Î±';
//     title.heating = 'ÎÎ­ÏÎ¼Î±Î½ÏÎ·';
//     title.cooling = 'Î¨ÏÎ¾Î·';
//     title.contactInfo = 'Î£ÏÎ¿Î¹ÏÎµÎ¯Î± ÎÏÎ¹ÎºÎ¿Î¹Î½ÏÎ½Î¯Î±Ï';
//     title.name = 'ÎÎ½Î¿Î¼Î±';
//     title.lastname = 'ÎÏÎ¯Î¸ÎµÏÎ¿';
//     title.phone = 'Î¤Î·Î»Î­ÏÏÎ½Î¿';
//     title.email = 'ÎÎ»ÎµÎºÏÏÎ¿Î½Î¹ÎºÎ® ÎÎ¹ÎµÏÎ¸ÏÎ½ÏÎ·';
//   } else {
//     title.gid = 'Estate Code';
//     title.type = 'Property Type';
//     title.listing_type = 'Listing Type';
//     title.area = 'Size';
//     title.address = 'Address';
//     title.bedrooms = 'Bedrooms';
//     title.price = 'Price';
//     title.isnew = 'Newly Build';
//     title.parking = 'Parking';
//     title.furnished = 'Furnished';
//     title.pets = 'Pets Allowed';
//     title.view = 'View';
//     title.heating = 'Heating';
//     title.cooling = 'Cooling';
//     title.contactInfo = 'Contact Info';
//     title.name = 'Name';
//     title.lastname = 'Last Name';
//     title.phone = 'Telephone';
//     title.email = 'Email';
//   }
//   clickedFeature = map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
//     return {
//       feature: feature,
//       layer: layer
//     };
//   }, this, function (layer) {
//     if (layer.get('id') === 'estates' || layer.get('id') === 'filteredEstates') {
//       return true;
//     }
//     return false;
//   }, this);
//   if (clickedFeature) {
//     if (clickedFeature.layer.get('id') === 'estates' && clickedFeature.feature.get('features').length === 1) {
//       f = clickedFeature.feature.getProperties().features[0];
//       createPSAandCard(f, obj);
//     } else if (clickedFeature.layer.get('id') === 'filteredEstates') {
//       f = clickedFeature.feature;
//       createPSAandCard(f, obj);
//     }
//   } else {
//     PSA.setSource(null);
//   }
// }

// function createPSAandCard(f, obj) {
//   var feature = {};
  // feature.gid = f.get('gid');
  // feature.area = f.get('estatearea');
//   if (lang === 'el') {
//     feature.type = f.get('estatetype');
//     feature.address = f.get('street_el') + ' ' + f.get('street_number');
//     feature.name = f.get('name_el');
//     feature.lastname = f.get('lastname_el');
//     if (f.get('sale') === true) {
//       feature.listing_type = 'Î ÏÎ»Î·ÏÎ·';
//     } else {
//       feature.listing_type = 'ÎÎ½Î¿Î¹ÎºÎ¯Î±ÏÎ·';
//     }
//     feature.btns = {
//       info: 'ÏÎ»Î·ÏÎ¿ÏÎ¿ÏÎ¹ÎµÏ',
//       close: 'ÎºÎ»ÎµÎ¹ÏÎ¹Î¼Î¿'
//     };
//   } else {
//     feature.type = f.get('estatetype_en');
//     feature.address = f.get('street_en') + ' ' + f.get('street_number');
//     feature.name = f.get('name_en');
//     feature.lastname = f.get('lastname_en');
//     if (f.get('sale') === true) {
//       feature.listing_type = 'Sale';
//     } else {
//       feature.listing_type = 'Rent';
//     }
//     feature.btns = {
//       info: 'info',
//       close: 'close'
//     };
//   }
//   feature.bedrooms = f.get('bedrooms');
//   feature.price = f.get('price');
//   feature.isnew = f.get('isnew');
//   feature.parking = f.get('parking');
//   feature.furnished = f.get('furnished');
//   feature.pets = f.get('pets');
//   feature.view = f.get('view');
//   feature.heating = f.get('heating');
//   feature.cooling = f.get('cooling');
//   feature.phone = f.get('phone1');
//   feature.email = f.get('email');
//   feature.coordinate = f.get('geometry').getCoordinates();

//   var PSASource = new ol.source.Vector({
//     attributions: [new ol.Attribution({
//       html: 'POI by ' + '<a href="http://www.terracognita.gr/">Terra Cognita</a>'
//     })],
//     format: geoJSONFormat,
//     loader: function (extent, resolution, projection) {
//       var url = 'http://127.0.0.1:3000/db/uses/' + feature.gid;
//       var self = this;
//       $.ajax({
//         url: url,
//         type: 'GET',
//         dataType: 'json'
//       }).done(function succeded(data, textStatus, jqXHR) {
        // var features = geoJSONFormat.readFeatures(data.property_services_analysis, {
        //   featureProjection: 'EPSG:3857'
        // });
        // var featuresLength = features.length - 1;
        // var area = new ol.style.Style({
        //   fill: new ol.style.Fill({
        //     color: [156, 39, 176, 0.1]
        //   })
        // });
        // features[0].setStyle(area);
        // self.addFeatures(features);
//         toastr.clear();
//         toastr.info('Found ' + featuresLength + ' Points of Interest in 8 minute distance!');
//       }).fail(function failed(jqXHR) {
//         toastr.clear();
//         if (jqXHR.status === 404) {
//           toastr.error('Sorry, we cannot find any Points of Interest in 8 minute distance!');
//         } else if (jqXHR.status === 503) {
//           toastr.error('Service Unavailable');
//         } else {
//           toastr.error('Internal Server Error');
//         }
//       });
//     },
//     strategy: ol.loadingstrategy.all
//   });
//   PSA.setSource(PSASource);
//   map.getView().setCenter(feature.coordinate);
//   map.getView().setResolution(1.2);
//   obj.feature = feature;

//   dust.render('estateCards', obj, function renderEstateCards(err, out) {
//     $('.estate-cards').html(out);
//     $('.mdl-card__title').css('background-image', 'url(http://res.cloudinary.com/firvain/image/upload/w_432,c_scale/' + obj.feature.gid + '.jpg)');
//     $('.estate-cards').addClass('estate-cards-active');
//   // $("#infobox").addClass("visuallyhidden");
//   });
//   $('a[href="#openModal"]').click(function () {
//     dust.render('modalInfo', obj, function renderModalInfo(err, out) {
//       $('.modal-content').html(out);
//       $('.big-image').css('background-image', 'url(http://res.cloudinary.com/firvain/image/upload/h_222,c_scale/' + obj.feature.gid + '.jpg)');
//     });
//   });
//   $('a[href="#closeEstateCard"]').click(function () {
//     $('.estate-cards').removeClass('estate-cards-active');
//   });
// }
// $('#information').on('click', function (e) {
//   // PSA.setSource(null);
//   if ($(this).prop('checked') === true) {
//     map.on('click', selectedFeature);
//     // $(this).parent().siblings().find('input').each(function () {$(this).prop('disabled', true);});
//   } else {
//     map.un('click', selectedFeature);
//     // $(this).parent().siblings().find('input').each(function () {$(this).prop('disabled', false);});
//   }
// });

var trans;
var userMap = (function userMap(window, document, Promise, $, mymap, info, filters) {
  'use strict';
  var context = 'map';
  var lang = document.documentElement.lang;
  // var globals = {};
  var $loading = $('.mdl-spinner');
  $(document)
  .ajaxStart(function start() {
    $loading.addClass('is-active');
  })
  .ajaxStop(function stop() {
    $loading.removeClass('is-active');
  });
  toastr.options = {
    closeButton: false,
    debug: false,
    newestOnTop: false,
    progressBar: false,
    positionClass: 'toast-top-center',
    preventDuplicates: false,
    onclick: null,
    showDuration: '300',
    hideDuration: '1000',
    timeOut: '5000',
    extendedTimeOut: '1000',
    showEasing: 'swing',
    hideEasing: 'linear',
    showMethod: 'fadeIn',
    hideMethod: 'fadeOut'
  };

  function init() {
    Promise.resolve(
      $.ajax({
        url: 'http://127.0.0.1:3000/api/language',
        type: 'GET',
        data: {
          type: lang,
          context: context
        }
      })
      )
      .then(function resolve(data) {
        var map;
        trans = data;
        map = mymap.initialize(trans);
        map1 = map;
        return map;
      })
      .then(function resolve(map) {
        info.init(map);
        filters.init(map);
      })
      .catch(function error(e) {
        console.log(e);
      });
  }

  return {
    init: init
  };
}(window, document, Promise, jQuery, mymap, info, filters));


// jQuery(document).ready(function ($) {
//   $('.spinner').addClass('visuallyhidden');
//   $('.mdl-spinner').removeClass('is-active');
//   // handleSelect();
// });

userMap.init();
$('#advanced-filters').click(function toggleFilters() {
  $('#estate-filters').toggleClass('visuallyhidden');
});
// $('#toggle-price-range').click(function togglePriceRange() {
//   $('#price-range').toggleClass('visuallyhidden');
// });

//# sourceMappingURL=data:application/json;charset=utf8;base64,
